---
$schema: "/.meta/.schemas/guides.json"
title: Kubernetes observability and monitoring with Datadog
description: How to integrate Datadog with Kubernetes on Qovery.
author_github: https://github.com/acarranoqovery
tags: ["type: tutorial", "technology: qovery"]
hide_pagination: true
---

import Alert from '@site/src/components/Alert';
import Assumptions from '@site/src/components/Assumptions';
import Jump from '@site/src/components/Jump';

While Qovery will soon provide basic metrics on apps resources usage, you might need a more advanced view on what happens on your infrastructure. There are many solutions on the market, one of them being Datadog. 
Datadog is one of the leading platforms for monitoring and observability, and it is pretty easy to integrate it with Qovery.

<Assumptions name="guide">

- You have a Qovery cluster running
- You have a dedicated Qovery project and environment to deploy Datadog (example: Project=Tooling, Environment=Production)
- You have a Datadog account
- You have already created a [Datadog API Key](https://docs.datadoghq.com/account_management/api-app-keys/#api-keys) here: `https://app.datadoghq.<region>/organization-settings/api-keys`

<Alert type="warning">

An API key is required, not an Application key. Please ensure you are using the correct key to authenticate.

<p align="center">
  <img src="/img/kubernetes-observability-and-monitoring-with-datadog/datadog-api-key.png" alt="Datadog - API Key" />
</p>

</Alert>


</Assumptions>

## Installation

In this tutorial, we will install the Datadog agent on a Qovery cluster to gather metrics about infrastructure and applications.

<Alert type="warning">

This tutorial is based on a specific version of Datadog. We have created it to assist our users, but Qovery is not responsible for any configuration issuesâ€”please contact Datadog support for assistance.

</Alert>

<Steps headingDepth={3}>  

<ol>

<li>

#### Add the Datadog helm repository

Add the Datadog helm repository in your Qovery settings by following [this documentation][docs.using-qovery.configuration.organization.helm-repository]

* Repository name: `Datadog`
* Kind: `HTTPS`
* Repository URL: `https://helm.datadoghq.com`

</li>

<li>

#### Create the datadog service within Qovery 

Create the Datadog helm service in the Qovery environment of your choice (preferrably within a dedicated Tooling project) by following [this documentation][docs.using-qovery.configuration.helm] and these values:

* General:
  * Application name: `Datadog`
  * Source:
    * Helm source: `Helm repository`
    * Repository: `Datadog` (the name given during the datadog helm repository added in the previous step)
    * Chart name: `datadog`
    * Version: `3.49.5` (this is the version we used for this setup, update it based on the chosen version)
    * Allow cluster-wide resources :heavy_check_mark:
* Values
  * Values override as file:
  * File source: `Raw YAML`
  * Raw YAML:

<Tabs
  centered={true}
  className={"rounded"}
  defaultValue={"default"}
  placeholder="Select your cluster type"
  select={false}
  size={null}
  values={[{"group":"Cluster","label":"Default","value":"default"},{"group":"Cluster","label":"GKE autopilot","value":"GKE autopilot"},{"group":"Cluster","label":"EKS with Karpenter","value":"EKS with karpenter"}]}>

<TabItem value="default">

```yaml
# The following YAML contains the minimum configuration required to deploy the Datadog Agent
# on your cluster. Update it accordingly to your needs
datadog:
  # here we use a Qovery secret to retrieve the Datadog API Key (See next step)
  apiKey: qovery.env.DD_API_KEY
  # Update the site depending on where you want to store your data in Datadog
  site: datadoghq.eu
  # Update the cluster name with the name of your choice
  clusterName: qoverycluster
```

</TabItem>

<TabItem value="GKE autopilot">

When deploying Datadog on GKE Autopilot, these specific configuration keys are essential to avoid conflicts with Qovery, disable incompatible checks, and ensure proper resource allocation in the Autopilot environment.

<Alert type="warning">

Note: Be sure to replace ${CLUSTER_NAME} with your actual GKE cluster name.

</Alert>

```yaml
datadog:
  # here we use a Qovery secret to retrieve the Datadog API Key (See next step)
  apiKey: qovery.env.DD_API_KEY
  # Update the site depending on where you want to store your data in Datadog
  site: datadoghq.eu
  # Update the cluster name with the name of your choice
  clusterName: ${CLUSTER_NAME} # Replace with your actual cluster name
  ignoreAutoConfig:
    # From Datadog support because of conflict with Qovery 
    - datadog_cluster_agent
    # https://github.com/DataDog/integrations-core/issues/10669#issuecomment-1123772693
    - cilium
clusterAgent:
  # clusterAgent.podAnnotations -- Annotations to add to the cluster-agents's pod(s)
  podAnnotations:
    ad.datadoghq.com/cluster-agent.check_names: '["datadog_cluster_agent"]'
    ad.datadoghq.com/cluster-agent.init_configs: "[{}]"
    ad.datadoghq.com/cluster-agent.instances: |
      [
        {
          "prometheus_url": "http://%%host%%:5000/metrics"
        }
      ]
providers:
  gke:
    autopilot: true
```

</TabItem>

<TabItem value="EKS with karpenter">

To ensure every node created by Karpenter is monitored by Datadog, we need to configure a priority class.

```yaml
# The following YAML contains the minimum configuration required to deploy the Datadog Agent
# on your cluster. Update it accordingly to your needs
datadog:
  # here we use a Qovery secret to retrieve the Datadog API Key (See next step)
  apiKey: qovery.env.DD_API_KEY
  # Update the site depending on where you want to store your data in Datadog
  site: datadoghq.eu
  # Update the cluster name with the name of your choice
  clusterName: qoverycluster
agents:
  tolerations:
    - operator: Exists
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
            - key: eks.amazonaws.com/compute-type
              operator: NotIn
              values:
                - fargate
  priorityClassCreate: true
  # Update the priority class name as you want
  priorityClassName: "datadog-karpenter-priorityclass"
  priorityClassValue: 1000
```

</TabItem>
</Tabs>

There are many other values you can set and modify the Datadog agent behaviour. For advanced usage, check: https://github.com/Datadog/helm-charts/blob/main/charts/datadog/values.yaml

Now get to the last step and just `Create` the service on Qovery.

</li>
<li>

#### Store the Datadog API Key as secret

In the previous step we have assigned the macro `qovery.env.DD_API_KEY` to the API Key value. In this step we will create this secret within the Qovery console.

* Open the service overview of the created Datadog service
* Enter the `Variables` section
* Add a new Variable with:
  * Variable = DD_API_KEY
  * Value = <your_API_KEY>
  * Scope = Service (so that it is accessible only to this service)
  * Secret variable :heavy_check_mark:

<p align="center">
  <img src="/img/kubernetes-observability-and-monitoring-with-datadog/datadog-secret.png" alt="Datadog - API Key" />
</p> 

If you need more information on how to manage your environment variables, have a look at [this documentation][docs.using-qovery.configuration.environment-variable]

</li>

<li>

#### Deploy your chart

Open the `Play` button and trigger the deployment of your chart (see point 1 in the picture below).

<p align="center">
  <img src="/img/kubernetes-observability-and-monitoring-with-datadog/deploy.png" alt="Datadog - Deploy" />
</p> 

You can follow the deployment and access the deployment logs by pressing the `Log` button (see point 2 in the picutre above).

Once the deployment is completed, you should see the Datadog agent pods and their status directly within the Qovery console.

<p align="center">
  <img src="/img/kubernetes-observability-and-monitoring-with-datadog/datadog-pods.png" alt="Datadog - Pods" />
</p> 

You can also look at the Pod logs by pressing the `Log` button.

</li>

<li>

#### Verify the setup on Datadog

Access again your Datadog interface and access the Infrastructure > Containers > Kubernetes sections. You should now see the data coming from your Qovery cluster

<p align="center">
  <img src="/img/kubernetes-observability-and-monitoring-with-datadog/datadog-console.png" alt="Datadog - Console" />
</p> 

</li>

</ol>
</Steps>

## Conclusion 

You now have Datadog agent running on your Qovery cluster. You can check their `Getting Started` guide to familiarize yourself with the product: https://docs.datadoghq.com/fr/getting_started.
