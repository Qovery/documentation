## Qovery CLI command examples

### Deploy your application with a specific commit ID

```bash
qovery application deploy \
  --organization <your_org_name> \
  --project <your_project_name> \
  --environment <your_environment_name> \
  --application <your_app_name> \
  --commit-id <your_commit_id> \
  --watch
```

<Alert type="success">

`--watch` is an optional parameter that will display the status of the deployment and return 0 if the deployment is successful or 1 if it fails.

</Alert>

### Deploy your multiple applications with a different commit ID

```bash
# deploy the application 1 and wait for the deployment to be successful with the --watch argument
qovery application deploy \
  --organization <your_org_name> \
  --project <your_project_name> \
  --environment <your_environment_name> \
  --application <your_app_1_name> \
  --commit-id <your_commit_id> \
  --watch

# deploy the application 2 and wait for the deployment to be successful with the --watch argument
qovery application deploy \
  --organization <your_org_name> \
  --project <your_project_name> \
  --environment <your_environment_name> \
  --application <your_app_2_name> \
  --commit-id <your_commit_id> \
  --watch
```
This is also applicable for the `qovery container deploy`, `qovery lifecycle deploy`, and `qovery cronjob deploy` commands.

### Deploy your multiple applications with a specific commit ID (monorepo)

```bash
# deploy the application 1, 2 and 3 with the same commit ID and wait for the deployment to be successful with the --watch argument
qovery application deploy \
  --organization <your_org_name> \
  --project <your_project_name> \
  --environment <your_environment_name> \
  --applications "<app_1_name>, <app_2_name>, <app_3_name>" \
  --commit-id <your_commit_id> \
  --watch
```

This is also applicable for the `qovery container deploy`, `qovery lifecycle deploy`, and `qovery cronjob deploy` commands.

### Create a Preview Environment for your Pull-Request

Qovery integrates automatically with GitHub, GitLab and Bitbucket to create a Preview Environment for each Pull-Request. But in case you want to control the creation of the Preview Environment manually, you can use the following commands:

```shell
# Clone your base environment
qovery environment clone \
  --organization <your_org_name> \
  --project <your_project_name> \
  --environment <your_environment_name> \
  --new-environment-name <your_new_environment_name>

# Change your application branch to the Pull-Request branch
qovery application update \
  --organization <your_org_name> \
  --project <your_project_name> \
  --environment <your_new_environment_name> \
  --application <your_app_name> \
  --branch <your_pull_request_branch_name>

# Deploy your new environment
qovery environment deploy \
  --organization <your_org_name> \
  --project <your_project_name> \
  --environment <your_new_environment_name> \
  --watch
```

### Delete a Preview Environment

```shell
qovery environment delete \
  --organization <your_org_name> \
  --project <your_project_name> \
  --environment <your_preview_environment_name> \
  --watch
```

### Terraform

Do you want to include Terraform in your CI? Check out our [Terraform documentation][docs.using-qovery.integration.terraform-provider].

### Any other examples?

Feel free to share your examples with us, and we'll be happy to share them with the community. Contact us on [our forum][urls.qovery_forum].
