---
title: "Helm"
description: "Learn how to configure your Helm on Qovery"
---
import Jump from '@site/src/components/Jump';
import Alert from '@site/src/components/Alert';
import Assumptions from '@site/src/components/Assumptions';

<Assumptions name="documentation">

You have created an [Environment][docs.using-qovery.configuration.environment].

</Assumptions>

A **helm** is one of the service types that can be deployed within an [Environment][docs.using-qovery.configuration.environment]. Via the helm service you can deploy any helm chart from a git repository or helm repository directly on the kubernetes cluster.

Qovery allows you to create and deploy helms from two different sources: Git Repository or Helm Repository

## Deploying from a Git Repository
In this configuration, Qovery will pull the chart from the chosen repository and install it on your kubernetes cluster.

## Deploying from a Helm Repository
In this configuration, Qovery will pull the chosen helm repository a chart and install it on your kubernetes cluster.

To improve security and avoid deploying charts from non-authorized repositories, we have decided to restrict the list of Helm Repositories you can use during the setup process. Only an administrator with the right permissions can manage it from the [Helm Repository Management page][docs.using-qovery.configuration.organization.helm-repository]

## Create a Helm

<Steps headingDepth={3}>
<ol>
<li>

Go into the chosen environment and press the "New Service" button and then the "Create helm" button

</li>
<li>

Select the following fields:
- Helm chart Name: give a name to your helm
- Description (Optional): write a text to describe your helm service
- Helm chart Source: Chose between Git Repository or Helm Repository, depending on the source location of your application

If you want to deploy a helm from a Git Repository you will have to select:
- Git Repository: Select the git provider and the git repository hosting your code (it can be hosted on GitHub, GitLab or Bitbucket).
- Branch: Select branch that Qovery should use to deploy your helm
- Root Helm Path: base folder in which the helm chart resides in your repository

If you want to deploy a helm from a Helm Repository you will have to select:
- Helm repository: select the helm repository storing the helm chart. Note: only pre-configured registry are available in this list, check the [Helm Repository Management page][docs.using-qovery.configuration.organization.helm-repository] for more information.
- Chart name: the name of the helm to be deployed with this application (example: jenkins)
- Chart version: the version of the chart to be deployed with this application (example: 1.0.0). 

- Helm arguments: specify the [helm arguments](https://helm.sh/docs/helm/helm_install/#options) to be used during the helm install/upgrade.
- Helm timeout: specify the value to wait for Kubernetes commands to complete. This defaults to 5mins.
- Allow cluster-wide resources: Allow this chart to deploy resources outside of the environment namespace. You must have the [full-access permissions][docs.using-qovery.configuration.organization.members-rbac] on the cluster, the right is present by default in `Admin`, `Devops` and `Owner` roles. Example: if you want to create a new CRD or a new ClusterRole, check this flag.

** Auto Deploy **

Available only if you have selected a git repository as helm source.
See the [Deploying with auto-deploy feature][docs.qovery.deployment.deploying-with-auto-deploy] section.

</li>
<li>

By default, the `values.yaml` next to your `chart.yaml` is used to configure your helm chart but you can create an override in the next two sections.

In the override as file section, define the location of the file containing the override you want to define for the values of this chart.

** Git Repository **

If you want to override it from another already existing values file from a Git Repository you will have to select:
- Git Repository: Select the git provider and git repository hosting your code (it can be hosted on GitHub, GitLab or Bitbucket).
- Branch: Select branch that Qovery should use to deploy your helm
- Overrides path: the path of the values files (example: ci/values_ci.yaml). You can specify multiple paths by separating them with a semi-colon.

** Raw YAML **

If you want to override it with a raw yaml you will have to click on `Create override`. A new editor modal will be opened, to let you write your yaml override. The default values.yaml content will be displayed on the right to help you to respect the structure.


<Alert type="warning">

- Git repository source is recommended as the raw yaml is not versioned.
- On both file types you can add `Qovery Macros` to add more functionalities to your helm deployment. Check [the section below][docs.using-qovery.configuration.helm#qovery-macros] before moving forward with your helm chart creation.

</Alert>

</li>

<li>

if you want to specify one by one your overrides or define additional overrides on top of the one available in your override file, you can pass them as arguments. These will be passed to the helm command via the `--set`, `--set-string` or `--set-json` arguments.

Add a new variable by declaring:
  - Variable: the variable name
  - Value type: 
    - Select `Generic` to pass configuration from the command line
    - Select `String` if you want to pass a string type (and avoid weird numeric conversions like 021341 interpreted as a number and thus the 0 is removed)
    - Select `Json` to set json values (scalars/objects/arrays) from the command line
  - Value

  
<Alert type="warning">

- You can combine override as file and override as argument but, in case of collision, the priority will be given to the override as argument.
- You can add `Qovery Macros` to add more functionalities to your helm deployment. Check [the section below][docs.using-qovery.configuration.helm#qovery-macros] before moving forward with your helm chart creation.  

</Alert>
  
</li>

<li>

You will find a recap of your helm setup and you can now decide to:
- Go back to one of the previous steps and change your helm settings (1)
- Create your helm without deploying it (2)
- Create and deploy your helm (3)

<p align="center">
  <img src="/img/configuration/helm/helm_creation_recap.png" alt="Helm" />
</p>

</li>
</ol>
</Steps>

## Deployment Management
Have a look at the [Deployment Management][docs.using-qovery.deployment] section for more information.

## Configuration

Once created, you can access the configuration of a helm at any time via the Settings tab available on the helm section

You can find below the description of each of the tabs available in this section

### General

General settings section allows you to set up the name and the source of your helm (git repository or helm repository) .

#### Git Repository

If your heml is from a git repository, within this section you can:
- Modify the git provider where your code is stored (it can be hosted on GitHub, GitLab or Bitbucket).
- Modify the branch that Qovery should use for deploying your application
- Modify `Root Helm Path` - base folder in which the helm chart resides in your repository

<Alert type="info">

Qovery supports mono repositories. [See our advanced guide for more details.][guides.advanced.monorepository]

</Alert>

<Alert type="warning">

If your repository contains private submodules using SSH protocol, you will need to add a secret beginning with GIT_SSH_KEY_, containing a private SSH key with access rights to your sumbodules repositories.

Secret names examples:

- GIT_SSH_KEY_GITHUB
- GIT_SSH_KEY_GITLAB
- GIT_SSH_KEY_MYAPP

</Alert>

#### Helm Repository
If your helm is deployed from a helm repository, within this section you can modify:
- Helm repository: select the helm repository storing the helm chart. You can add a new container registry by clicking on `New helm repository`.
- Chart name: the name of the helm to be deployed with this application (example: jenkins)
- Chart version: the version of the chart to be deployed with this application (example: 1.0.0). 

#### Arguments
For both kind of helm source, within this section yoiu can modify:
- Helm arguments: specify the [helm arguments](https://helm.sh/docs/intro/using_helm/#helpful-options-for-installupgraderollback) to be used during the helm install/upgrade.
- Helm timeout: specify the value to wait for Kubernetes commands to complete. This defaults to 5mins.

#### Auto Deploy

See the [Deploying with auto-deploy feature][docs.qovery.deployment.deploying-with-auto-deploy] section.

### Values

Within this section you can modify the values override defined within the creation flow.

#### Override as file

Define the location of the file containing the override you want to define for the values of this chart.

Select the source of your override:

** Git Repository **
If you want to override it from another already existing values file from a Git Repository you will have to select:
- Git Repository: Select the git provider and git repository hosting your code (it can be hosted on GitHub, GitLab or Bitbucket).
- Branch: Select branch that Qovery should use to deploy your helm
- Overrides path: the path of the values files (example: ci/values_ci.yaml). You can specify multiple paths by separating them with a semi-colon.

** Raw YAML **
If you want to override it with a raw yaml you will have to click on `Create override`. A new editor modal will be opened, to let you write your yaml override. The default values.yaml content will be displayed on the right to help you to respect the structure.

On both file types you can add `Qovery Macros` to add more functionalities to your helm deployment. Check [the section below][docs.using-qovery.configuration.helm#qovery-macros].

#### Override as arguments

if you want to specify one by one your overrides or define additional overrides on top of the one available in your override file, you can pass them as arguments. These will be passed to the helm command via the `--set`, `--set-string` or `--set-json` arguments.

Add a new variable by declaring:
- Override type: select the type of your variable. For more information, have a look at the Helm documentation
- Variable: the variable name
- Value
  
<Alert type="info">
  
You can combine override as file and override as argument but, in case of collision, the priority will be given to the override as argument.
  
</Alert>

You can add `Qovery Macros` to add more functionalities to your helm deployment. Check [the section below][docs.using-qovery.configuration.helm#qovery-macros].

#### Qovery macros

Qovery allows you to use the following macros within your override file. These macros will be automatically replaced by Qovery during the deployment phase, allowing you to access additional functionalities.

** Access to the Qovery environment variables **

Macro: `qovery.env.<ENV_VAR_NAME>`

It allows you to access the value of an environment variable or secret stored within Qovery. This is helpful when your deployed helm chart needs to access a secret or an environment variable available in Qovery.

Example: 

On Qovery we have created a database and created two aliases for the database url (DB_URL) and, the database password (DB_PASSWORD). Here an example on how the helm chart can access these environment variables and let your service point to the right database:
```yaml
postgres:
  url: qovery.env.DB_URL
  password: qovery.env.DB_PASSWORD
```

** Enable all the Qovery features **

* Macro for labels: `qovery.labels.service`
* Macro for annotations: `qovery.annotations.service`

It allows to add all the labels and annotations required to activate all the Qovery features on the deployed Helm chart (access your container logs, apply the stop/restart actions, display the pod status in the overview page).
Make sure to create an override and assign the macro to the labels of **any deployed Pods/Deployments/Services/Jobs**. 

Example:

```yaml
commonLabels:
  mylabel: "test"
  qovery.labels.service
annotations:
  qovery.annotations.service
```

When your Pods/Deployments/Services/Jobs are deployed, you should see Qovery labels and annotations added to the resources. Something like:

```yaml
apiVersion: v1
kind: Pod
metadata:
  labels:
    qovery.com/environment-id: 00000000-0000-0000-0000-000000000000
    qovery.com/project-id: 00000000-0000-0000-0000-000000000000
    qovery.com/service-id: 00000000-0000-0000-0000-000000000000
    qovery.com/service-type: helm
    ...
  annotations:
    qovery.com/service-version: application:x.y.z
    ...
```

### Ports

Within this section you can define the port exposed publicly.
You can edit the existing ports or declare new ones by specifying:
- Service name: this is the kubernetes service name in your helm chart
- Namespace (only if Allow cluster-wide resources was enabled): this is the kubernetes namespace used by your helm chart to deploy the pods behind the chosen service
- Service port: this is the port exposed internally by your service for the other services
- Protocol: you can select the protocol used by your service. Today Qovery supports the following protocols:
  - HTTPS (Select this protocol if you need to run Websockets)
  - gRPC
- External port: it is the port that can be used to access this service over the internet (when exposed publicly). Note that for HTTP and gRPC the port is set by default to 443.
- Port Name: it is the name assigned to the port. When multiple ports are exposed publicly, its value is used to route the traffic to the right port based on the called subdomain (which will contain the port name value). Since each port is exposed on the port 443, having a different subdomain is the only way to have multiple ports exposed over the internet. If not set, the default value is `p<portNumber>` (see [Qovery Provided Domain section](#qovery-provided-domains) for more information)

#### Important Informations

- Connections on public ports are automatically closed after 60 seconds. If you want to implement long living connection (like for websockets) please make sure to use the rigth ingress timeouts in the [advanced settings section][docs.using-qovery.configuration.advanced-settings#network-settings]

### Domains

<%= configure_domains("helm services") %>

## Logs

To learn how to display your helm logs, navigate to [logs section][docs.using-qovery.deployment.logs#live-logs]

## Clone

<%= clone_service() %>

### Advanced Settings

You can further customize the service behaviour via the service advanced settings. Check [this documentation][docs.using-qovery.configuration.advanced-settings] to know more.

## Delete a Helm

<Steps headingDepth={3}>
<ol>
<li>

Choose your helm

</li>
<li>

In the helm overview, click on the `3 dots` button and remove the helm.

</li>
</ol>
</Steps>
