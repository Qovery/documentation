/*! For license information please see 9a5077dd.57e889ce.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[184],{336:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return u})),n.d(t,"rightToc",(function(){return b})),n.d(t,"default",(function(){return p}));var i=n(1),s=n(9),r=(n(0),n(475)),a=n(482),o=n(474),l=n(479),c=(n(483),{last_modified_on:"2025-01-09",$schema:"/.meta/.schemas/guides.json",title:"How to setup rate limit on services",description:"How to setup rate limit on services running on Qovery.",author_github:"https://github.com/benjaminch",tags:["type: tutorial","technology: qovery"],hide_pagination:!0}),u={categories:[{name:"tutorial",title:"Tutorial",description:"Additional step-by-step resources to leverage even more Qovery",permalink:"/guides/tutorial"}],coverLabel:"How to setup rate limit on services",description:"How to setup rate limit on services running on Qovery.",permalink:"/guides/tutorial/how-to-setup-rate-limit-on-services",readingTime:"15 min read",source:"@site/guides/tutorial/how-to-setup-rate-limit-on-services.md",tags:[{label:"type: tutorial",permalink:"/guides/tags/type-tutorial"},{label:"technology: qovery",permalink:"/guides/tags/technology-qovery"}],title:"How to setup rate limit on services",truncated:!1,prevItem:{title:"How to seed a Postgres database on a dev environment",permalink:"/guides/tutorial/data-seeding-in-postgres"},nextItem:{title:"How to use CloudFront with a React frontend application on Qovery",permalink:"/guides/tutorial/how-to-use-cloudfront-with-react-frontend-application-on-qovery"}},b=[{value:"Goal",id:"goal",children:[]},{value:"Understand NGINX rate limiting configuration",id:"understand-nginx-rate-limiting-configuration",children:[]},{value:"Initial setup",id:"initial-setup",children:[]},{value:"Global rate limit",id:"global-rate-limit",children:[]},{value:"Service level rate limit",id:"service-level-rate-limit",children:[]},{value:"Service rate limit per custom header",id:"service-rate-limit-per-custom-header",children:[]},{value:"Other configuration examples",id:"other-configuration-examples",children:[{value:"Custom request limit status HTTP code",id:"custom-request-limit-status-http-code",children:[]},{value:"Limit connections",id:"limit-connections",children:[]}]}],m={rightToc:b};function p(e){var t=e.components,n=Object(s.a)(e,["components"]);return Object(r.b)("wrapper",Object(i.a)({},m,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)(o.a,{type:"warning",mdxType:"Alert"},"Changing NGINX snippets configuration is an advanced feature and can lead to misconfiguration. Please be careful when changing these settings as it might break the whole NGINX configuration and thus make impossible to reach your services."),Object(r.b)("p",null,"Now that your service is up and running on Qovery, you might want to setup some rate limits to protect your service from abuse.\nWhile we usually recommend to do it via third parties like Cloudlfare or similar because using such solutions, the traffic will be filtered out before reaching your workload hence not wasting your resources.\nThis guide will show you how to do that."),Object(r.b)(l.a,{name:"guide",mdxType:"Assumptions"},Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Your app is running on a Qovery managed cluster."))),Object(r.b)("h2",{id:"goal"},"Goal"),Object(r.b)("p",null,"This tutorial will cover how to setup rate limit on your services by customizing Nginx configuration. Several options are possible:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"#global-rate-limit"}),"Global rate limit")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"#global-rate-limit-per-custom-header"}),"Global rate limit per custom header")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"#service-level-rate-limit"}),"Service level rate limit")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"#custom-request-limit-status-http-code"}),"Customize request limit HTTP status code")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"#limit-connections"}),"Limit connection number"))),Object(r.b)("h2",{id:"understand-nginx-rate-limiting-configuration"},"Understand NGINX rate limiting configuration"),Object(r.b)("p",null,"More information about how rate limit works on NGINX can be found on their blog in ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://blog.nginx.org/blog/rate-limiting-nginx"}),"this post"),"."),Object(r.b)("h2",{id:"initial-setup"},"Initial setup"),Object(r.b)(a.a,{headingDepth:3,mdxType:"Steps"},Object(r.b)("ol",null,Object(r.b)("li",null,Object(r.b)("h4",{id:"configure-service"},"Configure service"),Object(r.b)("p",null,"I will use a basic container service ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://hub.docker.com/r/jmalloc/echo-server"}),"echo-server")," setup with Qovery.\nThis service is listening on port 80."),Object(r.b)("p",{align:"center"},Object(r.b)("img",{src:"/img/nginx-rate-limit/service-initial-setup-qovery-screen.png",alt:"Service initial setup in Qovery console"})),Object(r.b)("p",null,"To start with, this service don't have any rate limit set, so everything will be accepted.")),Object(r.b)("li",null,Object(r.b)("h4",{id:"for-demonstration-purpose-set-nginx-replicas-to-1"},"For demonstration purpose: set nginx replicas to 1"),Object(r.b)(o.a,{type:"warning",mdxType:"Alert"},"Rate limit will be set per nginx controller instances. Meaning, if you have more than 1 nginx instances, then those limits will be x2. You can configure the ",Object(r.b)("a",{href:"https://hub.qovery.com/docs/using-qovery/configuration/cluster-advanced-settings/#nginxhpamin_number_instances"}," minimum ")," `nginx.hpa.min_number_instances` and ",Object(r.b)("a",{href:"https://hub.qovery.com/docs/using-qovery/configuration/cluster-advanced-settings/#nginxhpamax_number_instances"}," maximum ")," `nginx.hpa.max_number_instances` number of instances in the Qovery console in cluster > settings > advanced-settings."),Object(r.b)("p",null,"For this tutorial and to ease the demonstration, I am setting nginx controller instances to 1 (min = max = 1) in cluster advanced settings.\nPlease do not set this in production, as it will reduce the availability of your service."),Object(r.b)("p",{align:"center"},Object(r.b)("img",{src:"/img/nginx-rate-limit/cluster-advanced-settings-replicas.png",alt:"Set nginx replicas to 1 in cluster advanced settings"}))),Object(r.b)("li",null,Object(r.b)("h4",{id:"load-testing"},"Load testing"),Object(r.b)("p",null,"I will send couple requests against this service showing off there is no rate limit set (100 req/sec and 500 requests total)."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-bash"}),"\u276f oha -q 100 -n 500 https://p8080-za845ce06-z01d340ed-gtw.z77ccfcb8.slab.sh/\nSummary:\n  Success rate: 100.00%\n  Total:        4.9964 secs\n  Slowest:      0.0275 secs\n  Fastest:      0.0029 secs\n  Average:      0.0052 secs\n  Requests/sec: 100.0720\n\n  Total data:   229.00 KiB\n  Size/request: 469 B\n  Size/sec:     45.83 KiB\n\nResponse time histogram:\n  0.003 [1]   |\n  0.005 [432] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\n  0.008 [14]  |\u25a0\n  0.010 [1]   |\n  0.013 [2]   |\n  0.015 [2]   |\n  0.018 [39]  |\u25a0\u25a0\n  0.020 [4]   |\n  0.023 [1]   |\n  0.025 [3]   |\n  0.028 [1]   |\n\nResponse time distribution:\n  10.00% in 0.0032 secs\n  25.00% in 0.0034 secs\n  50.00% in 0.0038 secs\n  75.00% in 0.0043 secs\n  90.00% in 0.0150 secs\n  95.00% in 0.0163 secs\n  99.00% in 0.0211 secs\n  99.90% in 0.0275 secs\n  99.99% in 0.0275 secs\n\n\nDetails (average, fastest, slowest):\n  DNS+dialup:   0.0126 secs, 0.0115 secs, 0.0172 secs\n  DNS-lookup:   0.0001 secs, 0.0000 secs, 0.0003 secs\n\nStatus code distribution:\n  [200] 500 responses\n")),Object(r.b)("p",null,"As we can see, all requests ended up with ",Object(r.b)("inlineCode",{parentName:"p"},"200")," status code.")))),Object(r.b)("h2",{id:"global-rate-limit"},"Global rate limit"),Object(r.b)("p",null,"Setting a global rate limit that affects all matching requests from each IP address is useful for protecting your server from abuse while allowing legitimate traffic through.\nThis setting will set a global rate limit to all exposed services on the cluster."),Object(r.b)(a.a,{headingDepth:3,mdxType:"Steps"},Object(r.b)("ol",null,Object(r.b)("li",null,Object(r.b)("h4",{id:"declare-the-global-rate-at-cluster-level"},"Declare the global rate at cluster level"),Object(r.b)("p",null,"In order to set a global rate limit, we need to declare it at cluster level in cluster advanced settings ",Object(r.b)("inlineCode",{parentName:"p"},"nginx.controller.http_snippet")," (see ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://hub.qovery.com/docs/using-qovery/configuration/cluster-advanced-settings/#nginxcontrollerhttp_snippet"}),"documentation"),")."),Object(r.b)("p",null,"Here's nginx ",Object(r.b)("inlineCode",{parentName:"p"},"nginx.controller.http_snippet")," value we will set:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-nginx"}),'limit_req_zone "$server_name" zone=global:10m rate=10r/s;\n')),Object(r.b)("strong",null,"Details"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"limit_req_zone"),": this is the NGINX directive that defines a shared memory zone for rate limiting"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},'"$server_name"'),": could be replaced with any constant value like ",Object(r.b)("inlineCode",{parentName:"li"},'"1"'),", the key just needs to be the same for all requests. You can also use ",Object(r.b)("inlineCode",{parentName:"li"},"$http_x_forwarded_for")," to rate limit based on the client IP address or any other custom headers, see ",Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"#global-rate-limit-per-custom-header"}),"custom rate limit key")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"zone=global:10m"),": ",Object(r.b)("inlineCode",{parentName:"li"},"global")," is the name of the zone (you'll reference this name in your location blocks), ",Object(r.b)("inlineCode",{parentName:"li"},"10m")," allocates 10 megabytes of shared memory for storing rate limiting states"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"rate=100r/s"),": allows 100 requests per second, any requests above this rate will be delayed or rejected.")),Object(r.b)("p",{align:"center"},Object(r.b)("img",{src:"/img/nginx-rate-limit/cluster-advanced-settings-set-global-rate-in-http-snippet.png",alt:"Declare global rate limit at cluster level in cluster advanced settings"}))),Object(r.b)("li",null,Object(r.b)("h4",{id:"use-this-global-rate"},"Use this global rate"),Object(r.b)("p",null,"Now that our global rate is defined, let use it in our nginx configuration."),Object(r.b)("p",null,"In order to do so, we need to declare this server snippet at cluster level in advanced setting ",Object(r.b)("inlineCode",{parentName:"p"},"nginx.controller.server_snippet")," (see ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://hub.qovery.com/docs/using-qovery/configuration/cluster-advanced-settings/#nginxcontrollerserver_snippet"}),"documentation"),"):"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-nginx"}),"location / {\n    limit_req zone=global;\n}\n")),Object(r.b)("strong",null," Details "),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"location /"),": matches all HTTP requests to your server (the / path is the root and matches everything)"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"limit_req zone=global"),": applies the rate limiting rules from the zone named ",Object(r.b)("inlineCode",{parentName:"li"},'"global"')," that we defined earlier. By default with this basic syntax, it will: not allow any bursting, reject excess requests with a 503 error, use ",Object(r.b)("inlineCode",{parentName:"li"},'"leaky bucket"')," algorithm for request processing")),Object(r.b)("p",{align:"center"},Object(r.b)("img",{src:"/img/nginx-rate-limit/cluster-advanced-settings-set-global-rate-in-server-snippet.png",alt:"Make use of global rate limit at cluster level in cluster advanced settings"})),Object(r.b)(o.a,{type:"info",mdxType:"Alert"},"However, this basic configuration can be quite strict. You can make it more forgiving by adding parameters: `burst=20 nodelay;` to the `limit_req` directive. This will allow the server to handle 20 requests in a burst, and not delay requests when the rate limit is exceeded.")),Object(r.b)("li",null,Object(r.b)("h4",{id:"deploy-your-cluster"},"Deploy your cluster"),Object(r.b)("p",null,"You can now deploy your cluster with the new settings."),Object(r.b)("p",{align:"center"},Object(r.b)("img",{src:"/img/nginx-rate-limit/deploy-cluster-after-advanced-settings-changes.png",alt:"Deploy cluster after advanced settings changes"}))),Object(r.b)("li",null,Object(r.b)("h4",{id:"testing-the-global-rate-limit"},"Testing the global rate limit"),Object(r.b)("p",null,"Let's test our setup, by sending 100 requests per second for 500 requests total.\nWe should see that some requests are rejected with a 503 status code."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-bash"}),"\u276f oha -q 100 -n 500 https://p8080-za845ce06-z01d340ed-gtw.z77ccfcb8.slab.sh/\nohaSummary:\n  Success rate: 100.00%\n  Total:        4.9966 secs\n  Slowest:      0.0405 secs\n  Fastest:      0.0024 secs\n  Average:      0.0049 secs\n  Requests/sec: 100.0674\n\n  Total data:   105.85 KiB\n  Size/request: 216 B\n  Size/sec:     21.18 KiB\n\nResponse time histogram:\n  0.002 [1]   |\n  0.006 [439] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\n  0.010 [8]   |\n  0.014 [0]   |\n  0.018 [35]  |\u25a0\u25a0\n  0.021 [7]   |\n  0.025 [5]   |\n  0.029 [3]   |\n  0.033 [0]   |\n  0.037 [1]   |\n  0.041 [1]   |\n\nResponse time distribution:\n  10.00% in 0.0028 secs\n  25.00% in 0.0030 secs\n  50.00% in 0.0032 secs\n  75.00% in 0.0035 secs\n  90.00% in 0.0145 secs\n  95.00% in 0.0167 secs\n  99.00% in 0.0253 secs\n  99.90% in 0.0405 secs\n  99.99% in 0.0405 secs\n\n\nDetails (average, fastest, slowest):\n  DNS+dialup:   0.0141 secs, 0.0113 secs, 0.0264 secs\n  DNS-lookup:   0.0000 secs, 0.0000 secs, 0.0005 secs\n\nStatus code distribution:\n  [503] 452 responses\n  [200] 48 responses\n")),Object(r.b)("p",null,"We do see a total of 500 requests sent over 5 seconds (100 req/sec) with 452 requests rejected with a ",Object(r.b)("inlineCode",{parentName:"p"},"503")," status code.\nDoing the maths 48 requests were accepted with ",Object(r.b)("inlineCode",{parentName:"p"},"200")," status code (48 / 5 = 9.6 req/sec) which matches the limit we set: 10 req/sec."),Object(r.b)("p",null,"One quick look at NGINX logs in our service logs, we can see a message for those rejected requests:"),Object(r.b)("p",{align:"center"},Object(r.b)("img",{src:"/img/nginx-rate-limit/nginx-logs-rejecting-requests-with-global-rate.png",alt:"NGINX logs showing requests rejections from global rate"}))))),Object(r.b)("h2",{id:"service-level-rate-limit"},"Service level rate limit"),Object(r.b)("p",null,"You can also set rate limits at the service level, which can be useful if you want to have different rate limits for different services."),Object(r.b)("p",null,"The configuration described below will limit the number of requests per second from an IP address (it's not global to the service)."),Object(r.b)(a.a,{headingDepth:3,mdxType:"Steps"},Object(r.b)("ol",null,Object(r.b)("li",null,Object(r.b)("h4",{id:"set-rate-limit-in-service-advanced-settings"},"Set rate limit in service advanced settings"),Object(r.b)("p",null,"Go to your service advanced settings and set those two settings:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"network.ingress.nginx_limit_rps"),": the rate limit in requests per second you want to set for your service (see ",Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://hub.qovery.com/docs/using-qovery/configuration/advanced-settings/#networkingress-nginx_limit_rps"}),"documentation"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"network.ingress.nginx_limit_rpm"),": the rate limit in requests per minute you want to set for your service (see ",Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://hub.qovery.com/docs/using-qovery/configuration/advanced-settings/#networkingress-nginx_limit_rpm"}),"documentation"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"network.ingress.nginx_limit_burst_multiplier"),": the burst limit multiplier in requests for your service (default is 5)  (see ",Object(r.b)("a",Object(i.a)({parentName:"li"},{href:"https://hub.qovery.com/docs/using-qovery/configuration/advanced-settings/#networkingress-nginx_limit_burst_multiplier"}),"documentation"),")")),Object(r.b)("p",null,"For this example, I will set a rate limit of 10 requests per minute with a burst limit of 2x."),Object(r.b)("p",null,"Using those"),Object(r.b)("p",{align:"center"},Object(r.b)("img",{src:"/img/nginx-rate-limit/service-advanced-settings-set-limit-rpm-and-burst.png",alt:"Service advanced settings to set request limit per minute and burst"}))),Object(r.b)("li",null,Object(r.b)("h4",{id:"deploy-your-service"},"Deploy your service"),Object(r.b)("p",null,"Deploy your service with the new settings."),Object(r.b)("p",{align:"center"},Object(r.b)("img",{src:"/img/nginx-rate-limit/deploy-service.png",alt:"Deploy service"}))),Object(r.b)("li",null,Object(r.b)("h4",{id:"testing-the-service-level-rate-limit"},"Testing the service level rate limit"),Object(r.b)("p",null,"Let's test our setup, by sending 100 requests per second for 500 requests total.\nWe should see that some requests are rejected with a 503 status code."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-bash"}),"\u276f oha -q 100 -n 500 https://p8080-za845ce06-z417ab7bf-gtw.z77ccfcb8.slab.sh/\nohaSummary:\n  Success rate: 100.00%\n  Total:        5.0009 secs\n  Slowest:      0.0705 secs\n  Fastest:      0.0025 secs\n  Average:      0.0062 secs\n  Requests/sec: 99.9827\n\n  Total data:   98.52 KiB\n  Size/request: 201 B\n  Size/sec:     19.70 KiB\n\nResponse time histogram:\n  0.002 [1]   |\n  0.009 [449] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\n  0.016 [5]   |\n  0.023 [12]  |\n  0.030 [11]  |\n  0.036 [5]   |\n  0.043 [4]   |\n  0.050 [6]   |\n  0.057 [2]   |\n  0.064 [4]   |\n  0.070 [1]   |\n\nResponse time distribution:\n  10.00% in 0.0029 secs\n  25.00% in 0.0031 secs\n  50.00% in 0.0033 secs\n  75.00% in 0.0037 secs\n  90.00% in 0.0145 secs\n  95.00% in 0.0263 secs\n  99.00% in 0.0578 secs\n  99.90% in 0.0705 secs\n  99.99% in 0.0705 secs\n\n\nDetails (average, fastest, slowest):\n  DNS+dialup:   0.0223 secs, 0.0114 secs, 0.0511 secs\n  DNS-lookup:   0.0000 secs, 0.0000 secs, 0.0001 secs\n\nStatus code distribution:\n  [503] 479 responses\n  [200] 21 responses\n")),Object(r.b)("p",null,"We do see a total of 500 requests sent over 5 seconds (100 req/sec) with 479 requests rejected with a ",Object(r.b)("inlineCode",{parentName:"p"},"503")," status code.\nDoing the maths 21 requests were accepted with ",Object(r.b)("inlineCode",{parentName:"p"},"200")," status code which matches the limit we set: 10 req/min with x2 burst multiplier."),Object(r.b)("p",null,"One quick look at NGINX logs in our service logs, we can see a message for those rejected requests:"),Object(r.b)("p",{align:"center"},Object(r.b)("img",{src:"/img/nginx-rate-limit/nginx-logs-rejecting-requests-with-service-rate.png",alt:"NGINX logs showing requests rejections from global rate"})),Object(r.b)("p",null,"When you set both ",Object(r.b)("inlineCode",{parentName:"p"},"network.ingress. nginx_limit_rpm")," (rate per minute) and ",Object(r.b)("inlineCode",{parentName:"p"},"network.ingress. nginx_limit_rps")," (rate per second) annotations on an Nginx ingress, both rate limits will be enforced simultaneously. This means that traffic will be restricted based on whichever limit is hit first.\nFor example, if you set:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"network.ingress.nginx_limit_rpm"),": 300"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"network.ingress.nginx_limit_rps"),": 10")),Object(r.b)("p",null,"This configuration would mean:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"No more than 300 requests allowed per minute"),Object(r.b)("li",{parentName:"ul"},"No more than 10 requests allowed per second")),Object(r.b)("p",null,"In practice, the ",Object(r.b)("inlineCode",{parentName:"p"},"network.ingress. nginx_limit_rps")," often becomes the more restrictive limit. In the example above, while ",Object(r.b)("inlineCode",{parentName:"p"},"network.ingress. nginx_limit_rpm")," allows for 300 requests per minute (averaging to 5 requests per second), the ",Object(r.b)("inlineCode",{parentName:"p"},"network.ingress. nginx_limit_rps")," setting would block any burst over 10 requests in a single second, even if the total requests per minute is well below 300.")))),Object(r.b)("h2",{id:"service-rate-limit-per-custom-header"},"Service rate limit per custom header"),Object(r.b)("p",null,"So far, we've created rate limit on server name or client address IP, but you can also create rate limit based on custom headers."),Object(r.b)("p",null,"This configuration requires to declare a rate limit at cluster level and then update service configurartion to use it."),Object(r.b)(a.a,{headingDepth:3,mdxType:"Steps"},Object(r.b)("ol",null,Object(r.b)("li",null,Object(r.b)("h4",{id:"define-this-rate-limiter"},"Define this rate limiter"),Object(r.b)("p",null,"Go to cluster advanced settings, and declare this new rate limiter by setting ",Object(r.b)("inlineCode",{parentName:"p"},"nginx.controller.http_snippet")," (see ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:""}),"documentation"),") with the following value (if any configuration is already set as in the example below, you can just append it at the end):"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-nginx"}),'map $http_x_qovery_api_key $limit_key {\n    default $http_x_qovery_api_key;\n    "" "anonymous";  # Fallback for missing or empty key\n}\n\nlimit_req_zone $limit_key zone=qovery_api_limit:10m rate=5r/s;\n')),Object(r.b)("strong",null," Details "),"- `map`: directive creates a variable `$limit_key` based on the value of the `$http_x_qovery_api_key` header - `$http_x_qovery_api_key`: is the incoming HTTP header that contains the API key for the client making the request",Object(r.b)("p",null,"If ",Object(r.b)("inlineCode",{parentName:"p"},"$http_x_qovery_api_key")," is present and non-empty, ",Object(r.b)("inlineCode",{parentName:"p"},"$limit_key")," will be set to the value of ",Object(r.b)("inlineCode",{parentName:"p"},"$http_x_qovery_api_key"),".\nIf ",Object(r.b)("inlineCode",{parentName:"p"},"$http_x_qovery_api_key"),' is missing or empty (""), ',Object(r.b)("inlineCode",{parentName:"p"},"$limit_key")," is set to ",Object(r.b)("inlineCode",{parentName:"p"},'"anonymous"'),"."),Object(r.b)("p",null,"This ensures that requests without an API key are handled differently (e.g., rate-limited as anonymous users)."),Object(r.b)("p",{align:"center"},Object(r.b)("img",{src:"/img/nginx-rate-limit/cluster-advanced-settings-set-custom-header-rate-in-http-snippet.png",alt:"Cluster settings custom header rate limiter"}))),Object(r.b)("li",null,Object(r.b)("h4",{id:"make-use-of-this-rate-limiter-at-service-level"},"Make use of this rate limiter at service level"),Object(r.b)("p",null,"Go to your service advanced settings and set ",Object(r.b)("inlineCode",{parentName:"p"},"network.ingress.nginx_controller_configuration_snippet")," with the following:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-nginx"}),"limit_req zone=qovery_api_limit burst=2 nodelay;\n")),Object(r.b)("p",null,"In this example, we have set a burst of ",Object(r.b)("inlineCode",{parentName:"p"},"2")," but it's not mandatory, you can set it to fit best to your use case (checkout ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://blog.nginx.org/blog/rate-limiting-nginx"}),"this documentation")," chapter ",Object(r.b)("inlineCode",{parentName:"p"},"Handling bursts")," to understand better burst).\nIt allows a small burst of requests beyond the defined rate before enforcing the rate limit.\nNormally, the ",Object(r.b)("inlineCode",{parentName:"p"},"rate=5r/s")," setting in the ",Object(r.b)("inlineCode",{parentName:"p"},"limit_req_zone")," configuration allows up to 5 requests per second per ",Object(r.b)("inlineCode",{parentName:"p"},"$limit_key"),"."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"burst=2")," setting allows up to 2 extra requests to pass through immediately, even if the rate limit has been exceeded, but only for short bursts."),Object(r.b)("li",{parentName:"ul"},"`nodelay`` disables queuing of excess requests, without nodelay, excess requests would be queued and served later, respecting the rate limit.")),Object(r.b)("p",{align:"center"},Object(r.b)("img",{src:"/img/nginx-rate-limit/service-advanced-settings-set-customer-header-rate-limiter-in-configuration-snippet.png",alt:"Service settins custom header rate limiter"}))),Object(r.b)("li",null,Object(r.b)("h4",{id:"deploy-your-service-1"},"Deploy your service"),Object(r.b)("p",null,"Deploy your service with the new settings."),Object(r.b)("p",{align:"center"},Object(r.b)("img",{src:"/img/nginx-rate-limit/deploy-service-with-custom-header-rate-limiter.png",alt:"Deploy service with custom header rate limiter"}))),Object(r.b)("li",null,Object(r.b)("h4",{id:"testing-the-service-level-rate-limit-1"},"Testing the service level rate limit"),Object(r.b)("p",null,"Let's test our setup, by sending 100 requests per second for 500 requests total.\nWe should see that some requests are rejected with a 503 status code."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-bash"}),'\u276f oha -q 100 -n 500 -H "X-QOVERY-API-KEY: benjamin" https://p8080-za845ce06-z82b5bc64-gtw.z77ccfcb8.slab.sh/\nSummary:\n  Success rate: 100.00%\n  Total:        4.9952 secs\n  Slowest:      0.0474 secs\n  Fastest:      0.0025 secs\n  Average:      0.0050 secs\n  Requests/sec: 100.0959\n\n  Total data:   101.40 KiB\n  Size/request: 207 B\n  Size/sec:     20.30 KiB\n\nResponse time histogram:\n  0.002 [1]   |\n  0.007 [447] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\n  0.011 [2]   |\n  0.016 [12]  |\n  0.020 [23]  |\u25a0\n  0.025 [4]   |\n  0.029 [6]   |\n  0.034 [3]   |\n  0.038 [0]   |\n  0.043 [1]   |\n  0.047 [1]   |\n\nResponse time distribution:\n  10.00% in 0.0028 secs\n  25.00% in 0.0031 secs\n  50.00% in 0.0032 secs\n  75.00% in 0.0036 secs\n  90.00% in 0.0147 secs\n  95.00% in 0.0183 secs\n  99.00% in 0.0310 secs\n  99.90% in 0.0474 secs\n  99.99% in 0.0474 secs\n\n\nDetails (average, fastest, slowest):\n  DNS+dialup:   0.0160 secs, 0.0117 secs, 0.0338 secs\n  DNS-lookup:   0.0000 secs, 0.0000 secs, 0.0001 secs\n\nStatus code distribution:\n  [503] 473 responses\n  [200] 27 responses\n')),Object(r.b)("p",null,"We do see a total of 500 requests sent over 5 seconds (100 req/sec) with 473 requests rejected with a ",Object(r.b)("inlineCode",{parentName:"p"},"503")," status code.\nDoing the maths 27 requests were accepted with ",Object(r.b)("inlineCode",{parentName:"p"},"200")," status code which matches the limit we set: 5.4 req/seq with two requests burst."),Object(r.b)("p",null,"One quick look at NGINX logs in our service logs, we can see a message for those rejected requests:"),Object(r.b)("p",{align:"center"},Object(r.b)("img",{src:"/img/nginx-rate-limit/nginx-logs-rejecting-requests-with-custom-header-in-service-logs.png",alt:"NGINX logs showing requests rejections from custom header rate limit in service logs"})),Object(r.b)("p",null,"Looking at raw NGINX logs, we do see the name of the rate limiter rejecting those requests:"),Object(r.b)("p",{align:"center"},Object(r.b)("img",{src:"/img/nginx-rate-limit/nginx-logs-rejecting-requests-with-custom-header.png",alt:"NGINX logs showing requests rejections from custom header rate limit"}))))),Object(r.b)("h2",{id:"other-configuration-examples"},"Other configuration examples"),Object(r.b)("p",null,"In this section, you will find couple other configurations examples (non exhaustive) you can set."),Object(r.b)("h3",{id:"custom-request-limit-status-http-code"},"Custom request limit status HTTP code"),Object(r.b)("p",null,"While NGINX defaults to ",Object(r.b)("inlineCode",{parentName:"p"},"503")," HTTP Status code when rejecting requests, you can change this default by setting ",Object(r.b)("inlineCode",{parentName:"p"},"nginx.controller.limit_request_status_code")," in cluster advanced settings.\nFor example, we usually use ",Object(r.b)("inlineCode",{parentName:"p"},"429"),"."),Object(r.b)("p",{align:"center"},Object(r.b)("img",{src:"/img/nginx-rate-limit/cluster-advanced-settings-custom-limit-http-status.png",alt:"Custom http status code for limit in cluster advanced settings"})),Object(r.b)("p",null,"For any rate limited request, NGINX will now returns an HTTP ",Object(r.b)("inlineCode",{parentName:"p"},"429")," status code."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-nginx"}),'oha -q 100 -n 500 -H "X-QOVERY-API-KEY: benjamin" https://p8080-za845ce06-z82b5bc64-gtw.z77ccfcb8.slab\n.sh/\nSummary:\n  Success rate: 100.00%\n  Total:        5.0001 secs\n  Slowest:      0.0616 secs\n  Fastest:      0.0052 secs\n  Average:      0.0102 secs\n  Requests/sec: 99.9981\n\n  Total data:   88.46 KiB\n  Size/request: 181 B\n  Size/sec:     17.69 KiB\n\nResponse time histogram:\n  0.005 [1]   |\n  0.011 [438] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\n  0.017 [10]  |\n  0.022 [1]   |\n  0.028 [0]   |\n  0.033 [15]  |\u25a0\n  0.039 [21]  |\u25a0\n  0.045 [4]   |\n  0.050 [6]   |\n  0.056 [1]   |\n  0.062 [3]   |\n\nResponse time distribution:\n  10.00% in 0.0062 secs\n  25.00% in 0.0065 secs\n  50.00% in 0.0069 secs\n  75.00% in 0.0076 secs\n  90.00% in 0.0278 secs\n  95.00% in 0.0353 secs\n  99.00% in 0.0501 secs\n  99.90% in 0.0616 secs\n  99.99% in 0.0616 secs\n\n\nDetails (average, fastest, slowest):\n  DNS+dialup:   0.0282 secs, 0.0206 secs, 0.0537 secs\n  DNS-lookup:   0.0000 secs, 0.0000 secs, 0.0001 secs\n\nStatus code distribution:\n  [429] 473 responses\n  [200] 27 responses\n')),Object(r.b)("p",null,"We can see ",Object(r.b)("inlineCode",{parentName:"p"},"429")," status code returned, same goes when looking at NGINX logs:"),Object(r.b)("p",{align:"center"},Object(r.b)("img",{src:"/img/nginx-rate-limit/cluster-advanced-settings-custom-limit-http-status-logs.png",alt:"NGINX logs showing requests rejections with custom http status code"})),Object(r.b)("h3",{id:"limit-connections"},"Limit connections"),Object(r.b)("p",null,"You might want to limit the number of concurrent connections allowed from a single IP address.\nTo do so, you can set the ",Object(r.b)("inlineCode",{parentName:"p"},"network.ingress.nginx_limit_connections")," advanced setting at service level."))}p.isMDXComponent=!0},473:function(e,t,n){var i;!function(){"use strict";var n={}.hasOwnProperty;function s(){for(var e=[],t=0;t<arguments.length;t++){var i=arguments[t];if(i){var r=typeof i;if("string"===r||"number"===r)e.push(i);else if(Array.isArray(i)&&i.length){var a=s.apply(null,i);a&&e.push(a)}else if("object"===r)for(var o in i)n.call(i,o)&&i[o]&&e.push(o)}}return e.join(" ")}e.exports?(s.default=s,e.exports=s):void 0===(i=function(){return s}.apply(t,[]))||(e.exports=i)}()},474:function(e,t,n){"use strict";n(476);var i=n(0),s=n.n(i),r=n(473),a=n.n(r);n(132);t.a=function(e){var t=e.children,n=e.classNames,i=e.fill,r=e.icon,o=e.type,l=null;switch(o){case"danger":l="alert-triangle";break;case"success":l="check-circle";break;case"warning":l="alert-triangle";break;default:l="info"}return s.a.createElement("div",{className:a()(n,"alert","alert--"+o,{"alert--fill":i,"alert--icon":!1!==r}),role:"alert"},!1!==r&&s.a.createElement("i",{className:a()("feather","icon-"+(r||l))}),t)}},475:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var i=n(0),s=n.n(i);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,s=function(e,t){if(null==e)return{};var n,i,s={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=s.a.createContext({}),u=function(e){var t=s.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o({},t,{},e)),n},b=function(e){var t=u(e.components);return s.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return s.a.createElement(s.a.Fragment,{},t)}},p=Object(i.forwardRef)((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,a=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),b=u(n),p=i,d=b["".concat(a,".").concat(p)]||b[p]||m[p]||r;return n?s.a.createElement(d,o({ref:t},c,{components:n})):s.a.createElement(d,o({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=p;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,a[1]=o;for(var c=2;c<r;c++)a[c]=n[c];return s.a.createElement.apply(null,a)}return s.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},476:function(e,t,n){var i=n(12);i(i.P,"Array",{fill:n(477)}),n(74)("fill")},477:function(e,t,n){"use strict";var i=n(27),s=n(75),r=n(26);e.exports=function(e){for(var t=i(this),n=r(t.length),a=arguments.length,o=s(a>1?arguments[1]:void 0,n),l=a>2?arguments[2]:void 0,c=void 0===l?n:s(l,n);c>o;)t[o++]=e;return t}},478:function(e,t,n){var i=n(28).f,s=Function.prototype,r=/^\s*function ([^ (]*)/;"name"in s||n(10)&&i(s,"name",{configurable:!0,get:function(){try{return(""+this).match(r)[1]}catch(e){return""}}})},479:function(e,t,n){"use strict";n(478);var i=n(0),s=n.n(i),r=n(474);t.a=function(e){var t=e.children,n=e.name;return s.a.createElement(r.a,{type:"info",fill:!0,icon:!1,rounded:!0,className:"list--icons list--icons--arrow list--tight list--indent margin-bottom--lg"},s.a.createElement("p",{class:"text--lg margin-bottom--sm",style:{marginTop:"-0.25em"}},"Before you begin, this ",n||"page"," assumes the following:"),t)}},480:function(e,t,n){"use strict";var i=n(1),s=n(0),r=n.n(s),a=n(39),o=n(484),l=n(20),c=n.n(l);t.a=function(e){var t,n=e.to,l=e.href,u=n||l,b=Object(o.a)(u),m=Object(s.useRef)(!1),p=c.a.canUseIntersectionObserver;return Object(s.useEffect)((function(){return!p&&b&&window.docusaurus.prefetch(u),function(){p&&t&&t.disconnect()}}),[u,p,b]),u&&b?r.a.createElement(a.b,Object(i.a)({},e,{onMouseEnter:function(){m.current||(window.docusaurus.preload(u),m.current=!0)},innerRef:function(e){var n,i;p&&e&&b&&(n=e,i=function(){window.docusaurus.prefetch(u)},(t=new window.IntersectionObserver((function(e){e.forEach((function(e){n===e.target&&(e.isIntersecting||e.intersectionRatio>0)&&(t.unobserve(n),t.disconnect(),i())}))}))).observe(n))},to:u})):r.a.createElement("a",Object(i.a)({},e,{href:u}))}},481:function(e,t,n){"use strict";var i=n(485),s=n(51);function r(e,t){return t.encode?t.strict?i(e):encodeURIComponent(e):e}t.extract=function(e){return e.split("?")[1]||""},t.parse=function(e,t){var n=function(e){var t;switch(e.arrayFormat){case"index":return function(e,n,i){t=/\[(\d*)\]$/.exec(e),e=e.replace(/\[\d*\]$/,""),t?(void 0===i[e]&&(i[e]={}),i[e][t[1]]=n):i[e]=n};case"bracket":return function(e,n,i){t=/(\[\])$/.exec(e),e=e.replace(/\[\]$/,""),t?void 0!==i[e]?i[e]=[].concat(i[e],n):i[e]=[n]:i[e]=n};default:return function(e,t,n){void 0!==n[e]?n[e]=[].concat(n[e],t):n[e]=t}}}(t=s({arrayFormat:"none"},t)),i=Object.create(null);return"string"!=typeof e?i:(e=e.trim().replace(/^(\?|#|&)/,""))?(e.split("&").forEach((function(e){var t=e.replace(/\+/g," ").split("="),s=t.shift(),r=t.length>0?t.join("="):void 0;r=void 0===r?null:decodeURIComponent(r),n(decodeURIComponent(s),r,i)})),Object.keys(i).sort().reduce((function(e,t){var n=i[t];return Boolean(n)&&"object"==typeof n&&!Array.isArray(n)?e[t]=function e(t){return Array.isArray(t)?t.sort():"object"==typeof t?e(Object.keys(t)).sort((function(e,t){return Number(e)-Number(t)})).map((function(e){return t[e]})):t}(n):e[t]=n,e}),Object.create(null))):i},t.stringify=function(e,t){var n=function(e){switch(e.arrayFormat){case"index":return function(t,n,i){return null===n?[r(t,e),"[",i,"]"].join(""):[r(t,e),"[",r(i,e),"]=",r(n,e)].join("")};case"bracket":return function(t,n){return null===n?r(t,e):[r(t,e),"[]=",r(n,e)].join("")};default:return function(t,n){return null===n?r(t,e):[r(t,e),"=",r(n,e)].join("")}}}(t=s({encode:!0,strict:!0,arrayFormat:"none"},t));return e?Object.keys(e).sort().map((function(i){var s=e[i];if(void 0===s)return"";if(null===s)return r(i,t);if(Array.isArray(s)){var a=[];return s.slice().forEach((function(e){void 0!==e&&a.push(n(i,e,a.length))})),a.join("&")}return r(i,t)+"="+r(s,t)})).filter((function(e){return e.length>0})).join("&"):""}},482:function(e,t,n){"use strict";var i=n(0),s=n.n(i),r=(n(473),n(481)),a=n.n(r);n(133);t.a=function(e){var t=e.children,n=e.headingDepth,r=e.hideFeedbackQuestion,o="undefined"!=typeof window?window.location:null,l={title:"Tutorial on "+o+" failed",body:"The tutorial on:\n\n"+o+"\n\nHere's what went wrong:\n\n\x3c!-- Insert command output and details. Thank you for reporting! :) --\x3e"},c="https://github.com/qovery/documentation/issues/new?"+a.a.stringify(l),u=Object(i.useState)(null),b=u[0],m=u[1];return s.a.createElement("div",{className:"steps steps--h"+n},t,!r&&!b&&s.a.createElement("div",{className:"steps--feedback"},"How was it? Did this tutorial work?\xa0\xa0",s.a.createElement("span",{className:"button button--sm button--primary",onClick:function(){return m("yes")}},"Yes"),"\xa0\xa0",s.a.createElement("a",{href:c,target:"_blank",className:"button button--sm button--primary"},"No")),"yes"==b&&s.a.createElement("div",{className:"steps--feedback steps--feedback--success"},"Thanks! If you're enjoying Qovery please consider ",s.a.createElement("a",{href:"https://github.com/qovery/documentation/",target:"_blank"},"starring our Github repo"),"."))}},483:function(e,t,n){"use strict";var i=n(0),s=n.n(i),r=n(480),a=n(473),o=n.n(a);n(134);t.a=function(e){var t=e.children,n=e.className,i=e.badge,a=e.leftIcon,l=e.rightIcon,c=e.size,u=e.target,b=e.to,m=o()("jump-to","jump-to--"+c,n),p=s.a.createElement("div",{className:"jump-to--inner"},s.a.createElement("div",{className:"jump-to--inner-2"},a&&s.a.createElement("div",{className:"jump-to--left"},s.a.createElement("i",{className:"feather icon-"+a})),s.a.createElement("div",{className:"jump-to--main"},i?s.a.createElement("span",{className:"badge badge--primary badge--right"},i):"",t),s.a.createElement("div",{className:"jump-to--right"},s.a.createElement("i",{className:"feather icon-"+(l||"chevron-right")+" arrow"}))));return u?s.a.createElement("a",{href:b,target:u,className:m},p):s.a.createElement(r.a,{to:b,className:m},p)}},484:function(e,t,n){"use strict";function i(e){return!1===/^(https?:|\/\/)/.test(e)}n.d(t,"a",(function(){return i}))},485:function(e,t,n){"use strict";e.exports=function(e){return encodeURIComponent(e).replace(/[!'()*]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}}}]);