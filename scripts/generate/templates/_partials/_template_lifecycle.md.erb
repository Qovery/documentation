You can deploy any <%= template %> manifests/templates with Qovery and manage the lifecycle of your own cloud resources. For example, you can deploy your own databases, lambdas, brokers etc...

Running and deploying your <%= template %> manifest/template is achieved via the Qovery Lifecycle Jobs, have a look at [this section][docs.using-qovery.integration.iac] to know how it works.

To simplify the configuration, Qovery provides a <%= template %> configuration template for your Lifecycle job, allowing you to package your manifest and run it with the <%= template %> CLI directly on your cluster.

Follow these steps to create and deploy your <%= template %> manifest/template:

<Steps headingDepth={3}>
<ol>
<li>
Add a new service

Enter the environment where you want to deploy your <%= template %> manifest and select the "Add Service" button 

</li>
<li>
Use the <%= template %> template

Select the "<%= template %>" option in the service creation list and follow the steps.

</li>

<li>
Manifest location

Provide the location of your manifest within your git repository

</li>

<li>
Customize your configuration

Qovery provides you with a pre-configuration for your lifecycle job capable to run and deploy your <%= template %>:
- **Dockerfile**: you will find a Dockerfile capable to package your manifest/template and run the right <%= template %> command depending on the event triggered (Example: the "start" command executes "<%= template %> apply .."). Customize this file to match your needs (backend config, additional configuration etc..)
- **Triggers**: you will find the default triggers and commands based on the default Dockerfile.
- **Resources**: you will find a default CPU/Memory values capable to run the <%= template %> CLI on a Kubernetes job
- **Environment variables**: you will be able to provide the input of your <%= template %> manifest/template as file, which will be stored as an [environment variable as file][docs.using-qovery.configuration.environment-variable#environment-variable-as-file]. You can also add additional environment variables necessary to run the <%= template %> commands (like AWS_SECRET_ACCESS_KEY etc..)

</li>

<li>
Create & Deploy

Once it is all set, you can Create and Deploy your <%= template %> job. This will trigger the execution and deployment of the <%= template %> manifest/template.

</li>

<li>
Access the <%= template %> output

If your <%= template %> manifest/template generates an output (see [Lifecycle job output][docs.using-qovery.configuration.lifecycle-job#job-output] for more information), the output will be fetched and injected as environment variable to any service of the same environment. It will allow those services to access the newly created resource.

<p align="center">
  <img src="/img/configuration/job/job_output.png" alt="Job output" />
</p>

</li>

</ol>
</Steps>

### Resources

- [Qovery Lifecycle Job Documentation][docs.using-qovery.configuration.lifecycle-job]
- [Qovery Lifecycle Job Examples](https://github.com/Qovery/lifecycle-job-examples)
- [How to deploy any resource with Lifecycle Jobs][guides.tutorial.how-to-use-lifecycle-job-to-deploy-any-kind-of-resources]
