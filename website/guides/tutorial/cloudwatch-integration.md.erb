---
$schema: "/.meta/.schemas/guides.json"
title: "Integrate your application logs to Cloudwatch"
description: "Add Kubernetes pod logs into Cloudwatch to perform full text search"
author_github: https://github.com/deimosfr
tags: ["type: tutorial", "technology: qovery"]
hide_pagination: true
---
import Jump from '@site/src/components/Jump';
import Alert from '@site/src/components/Alert';
import Assumptions from '@site/src/components/Assumptions';

Qovery provides by default an easy way to get access to your logs through the Console or the CLI. For statistics, debugging or security reasons, you may want to access all logs and perform a full-text search inside them.

Qovery implementation is based on [Loki](https://grafana.com/oss/loki/) for performance and cost-effective reasons. However, Loki is not a full-text search engine. It is a log aggregation system. It is not designed to be queried directly.

<Alert type="info">

Why Qovery does not provides current Loki access?

1. As mentioned Loki is not a full-text search and results may not reflect what you are looking for.
2. Loki is configured to answer usage from Qovery Console and CLI. Using it directly may impact Qovery Console and CLI performances or worst, lose logs and make it irresponsive.

</Alert>

Serveral solutions exists, with and without 3rd parties. We will cover here a solution without a third party. But if you're interrested, you can take a look at [Datadog integration][guides.tutorial.kubernetes-observability-and-monitoring-with-datadog].

Note: in this tutorial, we are using Fluent-bit with proposed solutions above. However, if none of those solutions suits your needs, feel free to look at supported solution on the official website.

## AWS permissions for Cloudwatch

We will create a dedicated service account (note: STS account can be used, but for simplicity reasons, we will use a dedicated service account).

On IAM create a policy with the following permissions, and name this policy `fluent-bit-write-policy`:

<p Valign="center">
  <img src="/img/aws-cloudwatch/fluent-bit-policy-content.png" alt="policy content" />
</p>

```json
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "CloudWatchLogs",
            "Effect": "Allow",
            "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutRetentionPolicy",
                "logs:PutLogEvents"
            ],
            "Resource": "arn:aws:logs:*:*:*"
        }
    ]
}
```

<p Valign="center">
  <img src="/img/aws-cloudwatch/fluent-bit-policy-create.png" alt="policy create" />
</p>

<Alert type="info">

You can enforce this policy by cluster if you need, by updating the `Resource` content. But we want to keep it simple in this tutorial, so we will apply it to all clusters (so you can reuse the same service account if you want for other clusters).

</Alert>

Once done, let's create a user and attach the policy to it:

<p Valign="center">
  <img src="/img/aws-cloudwatch/fluent-bit-user-create.png" alt="User create" />
</p>

<p Valign="center">
  <img src="/img/aws-cloudwatch/fluent-bit-cloudwatch-permissions.png" alt="User permissions" />
</p>

Finish the user creation and keep credentials for the coming section.

## Helm

We will use [AWS fluent-bit Helm Chart](https://artifacthub.io/packages/helm/aws/aws-for-fluent-bit) to setup logs streaming and deploy it with Qovery.

### Add the AWS EKS helm repository

Add the AWS EKS helm repository in your Qovery settings by following [this documentation][docs.using-qovery.configuration.organization.helm-repository]

* Repository name: `eks`
* Kind: `HTTPS`
* Repository URL: `https://aws.github.io/eks-charts`


### Create and deploy the helm chart within Qovery 

Create a helm service in the Qovery environment of your choice (preferrably within a dedicated Tooling project) by following [this documentation][docs.using-qovery.configuration.helm] and these values:

* General:
  * Application name: `fluent-bit`
  * Source:
    * Helm source: `Helm repository`
    * Repository: `eks` (the name given during the AWS EKS helm repository added in the previous step)
    * Chart name: `aws-for-fluent-bit`
    * Version: `0.1.21` (this is the version we used for this setup, update it based on the chosen version)
    * Allow cluster-wide resources :heavy_check_mark:
* Values
  * Values override as file:
  * File source: `Raw YAML`
  * Raw YAML:

```yaml
priorityClassName: system-node-critical

cloudWatch:
  enabled: true
  region: "<enter your cluster region>"
  logGroupName: "/aws/eks/fluentbit-<enter your cluster region>/logs"
  logRetentionDays: 7

env:
  - name: "AWS_ACCESS_KEY_ID"
    value: qovery.env.AWS_ACCESS_KEY
  - name: "AWS_SECRET_ACCESS_KEY"
    value: qovery.env.AWS_SECRET_ACCESS_KEY

firehose:
  enabled: false

kinesis:
  enabled: false

elasticsearch:
  enabled: false
```

You can take a look at additional configuration options on the [AWS provided chart](https://artifacthub.io/packages/helm/aws/aws-for-fluent-bit) 

Now get to the last step and just `Create` the service on Qovery.

### Store the AWS Secrets as Qovery secrets

In the previous step we have assigned the macro `qovery.env.qovery.env.AWS_ACCESS_KEY` and `qovery.env.AWS_SECRET_ACCESS_KEY` to the AWS secrets. In this step we will create these secrets within the Qovery console.

* Open the service overview of the created Datadog service
* Enter the `Variables` section
* Add a new Variable with:
  * Variable = AWS_SECRET_ACCESS_KEY
  * Value = <your_SECRET_ACCESS_KEY>
  * Scope = Service (so that it is accessible only to this service)
  * Secret variable :heavy_check_mark:
* Add a new Variable with:
  * Variable = AWS_ACCESS_KEY
  * Value = <your_ACCESS_KEY>
  * Scope = Service (so that it is accessible only to this service)
  * Secret variable :heavy_check_mark:

If you need more information on how to manage your environment variables, have a look at [this documentation][docs.using-qovery.configuration.environment-variable]

### Deploy your chart

Open the `Play` button and trigger the deployment of your chart.


## Cloudwatch usage

You can now use Cloudwatch to look at your logs. Connect to Cloudwatch, go into the `Logs insight` section, then you can perform queries:

<p Valign="center">
  <img src="/img/aws-cloudwatch/cloudwatch-search.png" alt="cloudwatch search" />
</p>

1. Select the fluent-bit group of logs
2. Create a query ([syntax examples](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html))
3. Run your query
4. See the result and expand to filter on other elements
