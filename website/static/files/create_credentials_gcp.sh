#!/bin/bash

# Checking the arguments
if [ "$#" -lt 3 ]; then
    echo "Usage: $0 <project_name> <role_name> <service_account_name>"
    echo "<project_name>: name of the project you want to have Qovery in"
    echo "<role_name>: name of the role to be created for Qovery"
    echo "<service_account_name>: name of the service account to be created for Qovery"

    exit 1
fi

project_name=$1
role_name=$2
service_account_name=$3

# Activate APIs
echo "Activating services APIs"
gcloud services enable container.googleapis.com
gcloud services enable compute.googleapis.com
gcloud services enable artifactregistry.googleapis.com
gcloud services enable storage.googleapis.com
gcloud services enable cloudresourcemanager.googleapis.com

concat_array_to_string() {
    array_ref=("${!1}")  # Create a copy of the array
    result=""
    delimiter="$2"

    for (( i=0; i<${#array_ref[@]}; i++ )); do
        if [ $i -eq 0 ]; then
            result="${array_ref[i]}"
        else
            result="${result}${delimiter}${array_ref[i]}"
        fi
    done

    echo "$result"
}

permissions=(
    # IAM
    "iam.serviceAccounts.create"
    "iam.serviceAccounts.delete"
    "iam.serviceAccounts.disable"
    "iam.serviceAccounts.enable"
    "iam.serviceAccounts.get"
    "iam.serviceAccounts.getIamPolicy"
    "iam.serviceAccounts.list"
    "iam.serviceAccounts.setIamPolicy"
    "iam.serviceAccounts.undelete"
    "iam.serviceAccounts.update"
    "iam.serviceAccounts.actAs"
    # Resource manager
    "resourcemanager.projects.get"
    "resourcemanager.projects.setIamPolicy"
    "resourcemanager.projects.getIamPolicy"
    # Kubernetes Engine
    "container.apiServices.create"
    "container.apiServices.delete"
    "container.apiServices.get"
    "container.apiServices.getStatus"
    "container.apiServices.list"
    "container.apiServices.update"
    "container.apiServices.updateStatus"
    "container.auditSinks.create"
    "container.auditSinks.delete"
    "container.auditSinks.get"
    "container.auditSinks.list"
    "container.auditSinks.update"
    "container.backendConfigs.create"
    "container.backendConfigs.delete"
    "container.backendConfigs.get"
    "container.backendConfigs.list"
    "container.backendConfigs.update"
    "container.bindings.create"
    "container.certificateSigningRequests.approve"
    "container.certificateSigningRequests.create"
    "container.certificateSigningRequests.delete"
    "container.certificateSigningRequests.get"
    "container.certificateSigningRequests.getStatus"
    "container.certificateSigningRequests.list"
    "container.certificateSigningRequests.update"
    "container.certificateSigningRequests.updateStatus"
    "container.clusterRoleBindings.create"
    "container.clusterRoleBindings.delete"
    "container.clusterRoleBindings.get"
    "container.clusterRoleBindings.list"
    "container.clusterRoleBindings.update"
    "container.clusterRoles.bind"
    "container.clusterRoles.create"
    "container.clusterRoles.delete"
    "container.clusterRoles.escalate"
    "container.clusterRoles.get"
    "container.clusterRoles.list"
    "container.clusterRoles.update"
    "container.clusters.connect"
    "container.clusters.create"
    "container.clusters.createTagBinding"
    "container.clusters.delete"
    "container.clusters.deleteTagBinding"
    "container.clusters.get"
    "container.clusters.getCredentials"
    "container.clusters.list"
    "container.clusters.listEffectiveTags"
    "container.clusters.listTagBindings"
    "container.clusters.update"
    "container.componentStatuses.get"
    "container.componentStatuses.list"
    "container.configMaps.create"
    "container.configMaps.delete"
    "container.configMaps.get"
    "container.configMaps.list"
    "container.configMaps.update"
    "container.controllerRevisions.create"
    "container.controllerRevisions.delete"
    "container.controllerRevisions.get"
    "container.controllerRevisions.list"
    "container.controllerRevisions.update"
    "container.cronJobs.create"
    "container.cronJobs.delete"
    "container.cronJobs.get"
    "container.cronJobs.getStatus"
    "container.cronJobs.list"
    "container.cronJobs.update"
    "container.cronJobs.updateStatus"
    "container.csiDrivers.create"
    "container.csiDrivers.delete"
    "container.csiDrivers.get"
    "container.csiDrivers.list"
    "container.csiDrivers.update"
    "container.csiNodeInfos.create"
    "container.csiNodeInfos.delete"
    "container.csiNodeInfos.get"
    "container.csiNodeInfos.list"
    "container.csiNodeInfos.update"
    "container.csiNodes.create"
    "container.csiNodes.delete"
    "container.csiNodes.get"
    "container.csiNodes.list"
    "container.csiNodes.update"
    "container.customResourceDefinitions.create"
    "container.customResourceDefinitions.delete"
    "container.customResourceDefinitions.get"
    "container.customResourceDefinitions.getStatus"
    "container.customResourceDefinitions.list"
    "container.customResourceDefinitions.update"
    "container.customResourceDefinitions.updateStatus"
    "container.daemonSets.create"
    "container.daemonSets.delete"
    "container.daemonSets.get"
    "container.daemonSets.getStatus"
    "container.daemonSets.list"
    "container.daemonSets.update"
    "container.daemonSets.updateStatus"
    "container.deployments.create"
    "container.deployments.delete"
    "container.deployments.get"
    "container.deployments.getScale"
    "container.deployments.getStatus"
    "container.deployments.list"
    "container.deployments.rollback"
    "container.deployments.update"
    "container.deployments.updateScale"
    "container.deployments.updateStatus"
    "container.endpointSlices.create"
    "container.endpointSlices.delete"
    "container.endpointSlices.get"
    "container.endpointSlices.list"
    "container.endpointSlices.update"
    "container.endpoints.create"
    "container.endpoints.delete"
    "container.endpoints.get"
    "container.endpoints.list"
    "container.endpoints.update"
    "container.events.create"
    "container.events.delete"
    "container.events.get"
    "container.events.list"
    "container.events.update"
    "container.frontendConfigs.create"
    "container.frontendConfigs.delete"
    "container.frontendConfigs.get"
    "container.frontendConfigs.list"
    "container.frontendConfigs.update"
    "container.horizontalPodAutoscalers.create"
    "container.horizontalPodAutoscalers.delete"
    "container.horizontalPodAutoscalers.get"
    "container.horizontalPodAutoscalers.getStatus"
    "container.horizontalPodAutoscalers.list"
    "container.horizontalPodAutoscalers.update"
    "container.horizontalPodAutoscalers.updateStatus"
    "container.hostServiceAgent.use"
    "container.ingresses.create"
    "container.ingresses.delete"
    "container.ingresses.get"
    "container.ingresses.getStatus"
    "container.ingresses.list"
    "container.ingresses.update"
    "container.ingresses.updateStatus"
    "container.jobs.create"
    "container.jobs.delete"
    "container.jobs.get"
    "container.jobs.getStatus"
    "container.jobs.list"
    "container.jobs.update"
    "container.jobs.updateStatus"
    "container.leases.create"
    "container.leases.delete"
    "container.leases.get"
    "container.leases.list"
    "container.leases.update"
    "container.limitRanges.create"
    "container.limitRanges.delete"
    "container.limitRanges.get"
    "container.limitRanges.list"
    "container.limitRanges.update"
    "container.localSubjectAccessReviews.create"
    "container.managedCertificates.create"
    "container.managedCertificates.delete"
    "container.managedCertificates.get"
    "container.managedCertificates.list"
    "container.managedCertificates.update"
    "container.mutatingWebhookConfigurations.create"
    "container.mutatingWebhookConfigurations.delete"
    "container.mutatingWebhookConfigurations.get"
    "container.mutatingWebhookConfigurations.list"
    "container.mutatingWebhookConfigurations.update"
    "container.namespaces.create"
    "container.namespaces.delete"
    "container.namespaces.get"
    "container.namespaces.getStatus"
    "container.namespaces.list"
    "container.namespaces.update"
    "container.namespaces.updateStatus"
    "container.networkPolicies.create"
    "container.networkPolicies.delete"
    "container.networkPolicies.get"
    "container.networkPolicies.list"
    "container.networkPolicies.update"
    "container.nodes.create"
    "container.nodes.delete"
    "container.nodes.get"
    "container.nodes.getStatus"
    "container.nodes.list"
    "container.nodes.proxy"
    "container.nodes.update"
    "container.nodes.updateStatus"
    "container.operations.get"
    "container.operations.list"
    "container.persistentVolumeClaims.create"
    "container.persistentVolumeClaims.delete"
    "container.persistentVolumeClaims.get"
    "container.persistentVolumeClaims.getStatus"
    "container.persistentVolumeClaims.list"
    "container.persistentVolumeClaims.update"
    "container.persistentVolumeClaims.updateStatus"
    "container.persistentVolumes.create"
    "container.persistentVolumes.delete"
    "container.persistentVolumes.get"
    "container.persistentVolumes.getStatus"
    "container.persistentVolumes.list"
    "container.persistentVolumes.update"
    "container.persistentVolumes.updateStatus"
    "container.podDisruptionBudgets.create"
    "container.podDisruptionBudgets.delete"
    "container.podDisruptionBudgets.get"
    "container.podDisruptionBudgets.getStatus"
    "container.podDisruptionBudgets.list"
    "container.podDisruptionBudgets.update"
    "container.podDisruptionBudgets.updateStatus"
    "container.podSecurityPolicies.create"
    "container.podSecurityPolicies.delete"
    "container.podSecurityPolicies.get"
    "container.podSecurityPolicies.list"
    "container.podSecurityPolicies.update"
    "container.podTemplates.create"
    "container.podTemplates.delete"
    "container.podTemplates.get"
    "container.podTemplates.list"
    "container.podTemplates.update"
    "container.pods.attach"
    "container.pods.create"
    "container.pods.delete"
    "container.pods.evict"
    "container.pods.exec"
    "container.pods.get"
    "container.pods.getLogs"
    "container.pods.getStatus"
    "container.pods.list"
    "container.pods.portForward"
    "container.pods.proxy"
    "container.pods.update"
    "container.pods.updateStatus"
    "container.priorityClasses.create"
    "container.priorityClasses.delete"
    "container.priorityClasses.get"
    "container.priorityClasses.list"
    "container.priorityClasses.update"
    "container.replicaSets.create"
    "container.replicaSets.delete"
    "container.replicaSets.get"
    "container.replicaSets.getScale"
    "container.replicaSets.getStatus"
    "container.replicaSets.list"
    "container.replicaSets.update"
    "container.replicaSets.updateScale"
    "container.replicaSets.updateStatus"
    "container.replicationControllers.create"
    "container.replicationControllers.delete"
    "container.replicationControllers.get"
    "container.replicationControllers.getScale"
    "container.replicationControllers.getStatus"
    "container.replicationControllers.list"
    "container.replicationControllers.update"
    "container.replicationControllers.updateScale"
    "container.replicationControllers.updateStatus"
    "container.resourceQuotas.create"
    "container.resourceQuotas.delete"
    "container.resourceQuotas.get"
    "container.resourceQuotas.getStatus"
    "container.resourceQuotas.list"
    "container.resourceQuotas.update"
    "container.resourceQuotas.updateStatus"
    "container.roleBindings.create"
    "container.roleBindings.delete"
    "container.roles.escalate"
    "container.roleBindings.get"
    "container.roleBindings.list"
    "container.roleBindings.update"
    "container.roles.bind"
    "container.roles.create"
    "container.roles.delete"
    "container.roles.get"
    "container.roles.list"
    "container.roles.update"
    "container.runtimeClasses.create"
    "container.runtimeClasses.delete"
    "container.runtimeClasses.get"
    "container.runtimeClasses.list"
    "container.runtimeClasses.update"
    "container.secrets.create"
    "container.secrets.delete"
    "container.secrets.get"
    "container.secrets.list"
    "container.secrets.update"
    "container.selfSubjectAccessReviews.create"
    "container.selfSubjectRulesReviews.create"
    "container.serviceAccounts.create"
    "container.serviceAccounts.createToken"
    "container.serviceAccounts.delete"
    "container.serviceAccounts.get"
    "container.serviceAccounts.list"
    "container.serviceAccounts.update"
    "container.services.create"
    "container.services.delete"
    "container.services.get"
    "container.services.getStatus"
    "container.services.list"
    "container.services.proxy"
    "container.services.update"
    "container.services.updateStatus"
    "container.statefulSets.create"
    "container.statefulSets.delete"
    "container.statefulSets.get"
    "container.statefulSets.getScale"
    "container.statefulSets.getStatus"
    "container.statefulSets.list"
    "container.statefulSets.update"
    "container.statefulSets.updateScale"
    "container.statefulSets.updateStatus"
    "container.storageClasses.create"
    "container.storageClasses.delete"
    "container.storageClasses.get"
    "container.storageClasses.list"
    "container.storageClasses.update"
    "container.storageStates.create"
    "container.storageStates.delete"
    "container.storageStates.get"
    "container.storageStates.getStatus"
    "container.storageStates.list"
    "container.storageStates.update"
    "container.storageStates.updateStatus"
    "container.storageVersionMigrations.create"
    "container.storageVersionMigrations.delete"
    "container.storageVersionMigrations.get"
    "container.storageVersionMigrations.getStatus"
    "container.storageVersionMigrations.list"
    "container.storageVersionMigrations.update"
    "container.storageVersionMigrations.updateStatus"
    "container.subjectAccessReviews.create"
    "container.thirdPartyObjects.create"
    "container.thirdPartyObjects.delete"
    "container.thirdPartyObjects.get"
    "container.thirdPartyObjects.list"
    "container.thirdPartyObjects.update"
    "container.tokenReviews.create"
    "container.updateInfos.create"
    "container.updateInfos.delete"
    "container.updateInfos.get"
    "container.updateInfos.list"
    "container.updateInfos.update"
    "container.validatingWebhookConfigurations.create"
    "container.validatingWebhookConfigurations.delete"
    "container.validatingWebhookConfigurations.get"
    "container.validatingWebhookConfigurations.list"
    "container.validatingWebhookConfigurations.update"
    "container.volumeAttachments.create"
    "container.volumeAttachments.delete"
    "container.volumeAttachments.get"
    "container.volumeAttachments.getStatus"
    "container.volumeAttachments.list"
    "container.volumeAttachments.update"
    "container.volumeAttachments.updateStatus"
    "container.volumeSnapshotClasses.create"
    "container.volumeSnapshotClasses.delete"
    "container.volumeSnapshotClasses.get"
    "container.volumeSnapshotClasses.list"
    "container.volumeSnapshotClasses.update"
    "container.volumeSnapshotContents.create"
    "container.volumeSnapshotContents.delete"
    "container.volumeSnapshotContents.get"
    "container.volumeSnapshotContents.getStatus"
    "container.volumeSnapshotContents.list"
    "container.volumeSnapshotContents.update"
    "container.volumeSnapshotContents.updateStatus"
    "container.volumeSnapshots.create"
    "container.volumeSnapshots.delete"
    "container.volumeSnapshots.get"
    "container.volumeSnapshots.getStatus"
    "container.volumeSnapshots.list"
    "container.volumeSnapshots.update"
    "container.volumeSnapshots.updateStatus"
    # Artifact registry
    "artifactregistry.dockerimages.get"
    "artifactregistry.dockerimages.list"
    "artifactregistry.locations.get"
    "artifactregistry.locations.list"
    "artifactregistry.repositories.create"
    "artifactregistry.repositories.createTagBinding"
    "artifactregistry.repositories.delete"
    "artifactregistry.repositories.deleteArtifacts"
    "artifactregistry.repositories.deleteTagBinding"
    "artifactregistry.repositories.downloadArtifacts"
    "artifactregistry.repositories.get"
    "artifactregistry.repositories.getIamPolicy"
    "artifactregistry.repositories.list"
    "artifactregistry.repositories.listEffectiveTags"
    "artifactregistry.repositories.listTagBindings"
    "artifactregistry.repositories.readViaVirtualRepository"
    "artifactregistry.repositories.setIamPolicy"
    "artifactregistry.repositories.update"
    "artifactregistry.repositories.uploadArtifacts"
    "artifactregistry.tags.create"
    "artifactregistry.tags.delete"
    "artifactregistry.tags.get"
    "artifactregistry.tags.list"
    "artifactregistry.tags.update"
    "artifactregistry.versions.delete"
    "artifactregistry.versions.get"
    "artifactregistry.versions.list"
    # Network compute
    "compute.instanceGroupManagers.get"
    "compute.networks.access"
    "compute.networks.create"
    "compute.networks.createTagBinding"
    "compute.networks.delete"
    "compute.networks.deleteTagBinding"
    "compute.networks.get"
    "compute.networks.getEffectiveFirewalls"
    "compute.networks.getRegionEffectiveFirewalls"
    "compute.networks.list"
    "compute.networks.listEffectiveTags"
    "compute.networks.listPeeringRoutes"
    "compute.networks.listTagBindings"
    "compute.networks.mirror"
    "compute.networks.setFirewallPolicy"
    "compute.networks.updatePeering"
    "compute.networks.updatePolicy"
    "compute.networks.use"
    "compute.networks.useExternalIp"
    "compute.subnetworks.create"
    "compute.subnetworks.createTagBinding"
    "compute.subnetworks.delete"
    "compute.subnetworks.deleteTagBinding"
    "compute.subnetworks.expandIpCidrRange"
    "compute.subnetworks.get"
    "compute.subnetworks.getIamPolicy"
    "compute.subnetworks.list"
    "compute.subnetworks.listEffectiveTags"
    "compute.subnetworks.listTagBindings"
    "compute.subnetworks.mirror"
    "compute.subnetworks.setIamPolicy"
    "compute.subnetworks.setPrivateIpGoogleAccess"
    "compute.subnetworks.update"
    "compute.subnetworks.use"
    "compute.subnetworks.useExternalIp"
    "compute.instanceGroupManagers.get"
    "compute.instanceGroupManagers.list"
    "compute.instanceGroupManagers.listEffectiveTags"
    "compute.instanceGroupManagers.listTagBindings"
    "compute.instanceGroupManagers.update"
    "compute.instanceGroupManagers.use"
    "compute.instanceGroups.get"
    "compute.instanceGroups.list"
    "compute.instanceGroups.update"
    "compute.instanceGroups.use"
    "compute.regions.get"
    "compute.regions.list"
    "compute.routers.create"
    "compute.routers.delete"
    "compute.routers.deleteRoutePolicy"
    "compute.routers.get"
    "compute.routers.getRoutePolicy"
    "compute.routers.list"
    "compute.routers.listBgpRoutes"
    "compute.routers.listRoutePolicies"
    "compute.routers.update"
    "compute.routers.updateRoutePolicy"
    "compute.routers.use"
    "compute.routes.create"
    "compute.routes.createTagBinding"
    "compute.routes.delete"
    "compute.routes.deleteTagBinding"
    "compute.routes.get"
    "compute.routes.list"
    "compute.routes.listEffectiveTags"
    "compute.routes.listTagBindings"
    # Storage
    "storage.bucketOperations.cancel"
    "storage.bucketOperations.get"
    "storage.bucketOperations.list"
    "storage.buckets.create"
    "storage.buckets.createTagBinding"
    "storage.buckets.delete"
    "storage.buckets.deleteTagBinding"
    "storage.buckets.enableObjectRetention"
    "storage.buckets.get"
    "storage.buckets.getIamPolicy"
    "storage.buckets.getObjectInsights"
    "storage.buckets.list"
    "storage.buckets.listEffectiveTags"
    "storage.buckets.listTagBindings"
    "storage.buckets.restore"
    "storage.buckets.setIamPolicy"
    "storage.buckets.update"
    "storage.managedFolders.create"
    "storage.managedFolders.delete"
    "storage.managedFolders.get"
    "storage.managedFolders.getIamPolicy"
    "storage.managedFolders.list"
    "storage.managedFolders.setIamPolicy"
    "storage.multipartUploads.abort"
    "storage.multipartUploads.create"
    "storage.multipartUploads.list"
    "storage.multipartUploads.listParts"
    "storage.objects.create"
    "storage.objects.delete"
    "storage.objects.get"
    "storage.objects.getIamPolicy"
    "storage.objects.list"
    "storage.objects.overrideUnlockedRetention"
    "storage.objects.restore"
    "storage.objects.setIamPolicy"
    "storage.objects.setRetention"
    "storage.objects.update"
)

# ROLE
role_id=$(gcloud iam roles describe $role_name --project=$project_name --format=json --verbosity=none --quiet | jq -r '.name // ""')
if [ -z "$role_id" ]; then
    echo "Role ${role_name} doesn't exist, creating it"
    gcloud iam roles create ${role_name} --description="Qovery role" --permissions="$(concat_array_to_string permissions[@] ',')" --project=$project_name --format=json --quiet
    if [ $? -ne 0 ]; then
        echo "Cannot create role"
        exit 1
    fi
    role_id=$(gcloud iam roles describe $role_name --project=$project_name --format=json --verbosity=none | jq -r '.name // ""')
else
    echo "Role ${role_name} exists, updating permissions"
    gcloud iam roles update $role_name --permissions="$(concat_array_to_string permissions[@] ',')" --project=$project_name --format=json --quiet
    if [ $? -ne 0 ]; then
        echo "Cannot update role permissions"
        exit 1
    fi
fi

# SERVICE ACCOUNT
existing_service_account_email=$(gcloud iam service-accounts describe "$service_account_name@$project_name.iam.gserviceaccount.com" --project=$project_name --format=json --verbosity=none | jq -r '.email // ""')
if [ -z "$existing_service_account_email" ]; then
    echo "Service account $service_account_name doesn't exist, creating it"
    gcloud iam service-accounts create $service_account_name --display-name="$service_account_name" --project=$project_name --quiet
    if [ $? -ne 0 ]; then
        echo "Cannot create service account"
        exit 1
    fi
    existing_service_account_email=$(gcloud iam service-accounts describe "$service_account_name@$project_name.iam.gserviceaccount.com" --project=$project_name --format=json --verbosity=none | jq -r '.email // ""')
else
    echo "Service account $service_account_name already exists, skipping creation"
fi

# ROLE BINDING
binding_exists=$(gcloud projects get-iam-policy $project_name --flatten="bindings[].members" --format="json" --filter="bindings.role:$role_name bindings.members:$existing_service_account_email" --verbosity=none --project=$project_name --quiet | jq -r '.[0].etag // ""')
if [ -z "$binding_exists" ]; then
   echo "Binding between $role_id and $service_account_name doesnt exist, creating it"
   gcloud projects add-iam-policy-binding $project_name --member="serviceAccount:$existing_service_account_email" --role="$role_id" --project=$project_name --quiet
   if [ $? -ne 0 ]; then
      echo "Cannot create role binding"
      exit 1
   fi
else
    echo "Binding of $role_id to $service_account_name already exists, skipping"
fi

# Generate key for the service account
echo "Generating key for the service account"
gcloud iam service-accounts keys create key.json \
  --iam-account="$service_account_name@$project_name.iam.gserviceaccount.com" --quiet
if [ $? -eq 0 ]; then
    echo "Operations completed. You can now download your json key to upload in Qovery"
else
    echo "Cannot create keys for service account, service account can have 10 keys maximum, you have to delete unused keys for this account to recreate one."
    exit 1
fi
