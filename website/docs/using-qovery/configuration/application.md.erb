---
title: "Application"
description: "Learn how to configure your Application on Qovery"
---
import Jump from '@site/src/components/Jump';
import Alert from '@site/src/components/Alert';
import Assumptions from '@site/src/components/Assumptions';

<Assumptions name="documentation">

You have created an [Environment][docs.using-qovery.configuration.environment].

</Assumptions>

An **application** is part of a [Project][docs.using-qovery.configuration.project] within an [Environment][docs.using-qovery.configuration.environment] and is a container unit. Multiple applications can be part of the same [Environment][docs.using-qovery.configuration.environment], be connected to a set of dependencies (databases and other services), and can communicate with other applications within the same Environment.

Qovery allows you to create and deploy applications from two different sources: Git Repository or Container Registry

## Deploying from a Git Repository
In this configuration, Qovery will pull the code from the chosen repository, build the application and deploy it on your kubernetes cluster.

The list of Git repositories available during the setup is strictly tied to the permissions of your git account (by default Qovery can access all your repositories). If you want to restrict the Qovery access only to a few repositories, user the [GitHub Qovery Application][docs.using-qovery.configuration.organization#managing-git-permissions-using-the-qovery-github-app] (only for Github).

## Deploying from a Container Registry
In this configuration, Qovery will pull the chosen container registry an image you have pre-built and deploy it on your kubernetes cluster.

To improve the security and avoid deploying images from non-authorized registries, we have decided to restrict the list of Container Registry you can use during the setup process. Only an administrator with the right permissions can manage it from the [Container Registry Management page][docs.using-qovery.configuration.organization#container-registry-management]


## Create an Application

<Steps headingDepth={3}>
<ol>
<li>

Go into the chosen environment and press the "New Service" button and then the "Create application" button

<p align="center">
  <img src="/img/configuration/application/creation_1.png" alt="Creation" />
</p>

</li>
<li>

Select the following fields:
- Application Name: give a name to your applicaiton
- Application Source: Chose between Git Repository or Container Registry, depending on the source location of your application

If you want to deploy an application from a Git Repository you will have to select:
- Git Repository: Select the git provider hosting your code (it can be hosted on GitHub, GitLab or Bitbucket).
- Branch: Select branch that Qovery should use to deploy your application
- Root Application Path: base folder in which the application resides in your repository
- Build Mode: chose between Docker or Buildpack. For more information, go to [this section][docs.using-qovery.configuration.application#build-mode]

If you want to deploy an application from a Container Registry you will have to select:
- Registry: select the container registry storing the image of your application. Note: only pre-configured registry are available in this list, check the [Container Registry Management page][docs.using-qovery.configuration.organization#container-registry-management] for more information.
- Image name: the name of the image to be deployed with this application (example: postgres)
- Image tag: the tag of the image to be deployed with this application (example: 12)
- Image Entrypoint: the entrypoint to be used to launch your applicaiton (not mandatory)
- CMD Arguments: the arguments to be passed to launch your applicaiton (not mandatory). We expect the format to be an array. Example ["rails", "-h", "0.0.0.0", "-p", "8080", "string"]

<Alert type="info">

The tag 'latest' is not supported, please use a specific tag.

</Alert>


</li>
<li>

Within this section, you will need to define the resources to be assigned to your applicaiton at run time.

- vCPU: the vCPU assigned to each instance of your application. The default is 500m (0.5 vCPU).
- RAM: the amount of RAM assigned to each instance of your application. The default is 512MB.
- Number of instances (Application Auto-scaling): select the minimum and the maximum number of instances of your application that can run within your cluster. The number of instances running at an insant t is automatically managed by Kubernetes (Application auto-scaling) and it is based on real-time CPU consumption. When your app goes above 60% of CPU consumption for 5 minutes, your app will be auto-scaled and more instances will be added. It is transparent.
 Qovery runs your application on Kubernetes and relies on [metrics-server](https://github.com/kubernetes-sigs/metrics-server) service to auto-scale your app.

<Alert type="info">

Please note that in this section you configure the CPU/RAM allocated by the cluster for your application and that cannot consume more than this value. Even if the application is underused and consume less resources, the cluster will still reserve the selected amount of CPU/RAM.

</Alert>


<p align="center">
  <img src="/img/configuration/application/application_creation_resources.png" alt="Resources" />
</p>

</li>
<li>

You can now define one or more ports for your Application. Most of the application needs to be accessed by other services inside or outside of your environment. To set up the access,
declare the ports your application uses. Internal ports are available internally inside your environment for other services to use.
You can also expose ports publicly - it makes them accessible over the public network via a dedicated public domain will be assigned to your application during the deployment. Today we support only the HTTPS and Websocket protocols (on the 443 port)

<p align="center">
  <img src="/img/configuration/application/application_creation_port.png" alt="Application Ports" />
</p>

<Alert type="info">
Qovery determines the readiness of your service based on the availability of the declared port. If your application does not open this port within 10 minutes, the associated container will be shut down
</Alert>
<Alert type="info">
Connections on public port are automatically closed after 60 seconds. If you want to implement long living connection (like for websockets) please make sure to use the rigth ingress timeouts in the [advanced settings section][docs.using-qovery.configuration.advanced-settings#network-settings]
</Alert>

</li>
<li>

You will find a recap of your application setup and you can now decide to:
1. Go back to one of the previous steps and change your applicaiton settings
2. Create your application without deploying it
3. Create and deploy your application

<p align="center">
  <img src="/img/configuration/application/application_creation_recap.png" alt="Application" />
</p>

</li>
</ol>
</Steps>



## Configuration

Once created, you can access the configuration of an application at any time via the Settings tab available on the application section

<p align="center">
  <img src="/img/configuration/application/settings.png" alt="Application Settings" />
</p>

You can find below the description of each of the tabs available in this section

### General

General settings section allows you to set up your application name and the source code location (git repository or image registry) .

#### Git Repository
If your application is built and deployed from a git repository, within this section you can:
- Modify the git provider where your code is stored (it can be hosted on GitHub, GitLab or Bitbucket).
- Modify the branch that Qovery should use for deploying your application
- Modify `Root Application Path` - base folder in which the application resides in your repository

<p align="center">
  <img src="/img/configuration/application/app-general-git.png" alt="General Settings Git" />
</p>

<Alert type="info">

Qovery supports mono repositories. [See our advanced guide for more details.][guides.advanced.monorepository]

</Alert>

<Alert type="warning">

If your repository contains private submodules using SSH protocol, you will need to add a secret beginning with GIT_SSH_KEY_, containing a private SSH key with access rights to your sumbodules repositories.

Secret names examples:

- GIT_SSH_KEY_GITHUB
- GIT_SSH_KEY_GITLAB
- GIT_SSH_KEY_MYAPP

</Alert>

#### Container Registry
If your application is deployed from an image registry, within this section you can modify:
- Registry: select the container registry storing the image of your application. Note: only pre-configured registry are available in this list, check the [Container Registry Management page][docs.using-qovery.configuration.organization#container-registry-management] for more information.
- Image name: the name of the image to be deployed with this application (example: postgres)
- Image tag: the tag of the image to be deployed with this application (example: 12)
- Image Entrypoint: the entrypoint to be used to launch your applicaiton (not mandatory)
- CMD Arguments: the arguments to be passed to launch your applicaiton (not mandatory). We expect the format to be an array. Example ["rails", "-h", "0.0.0.0", "-p", "8080", "string"]

<Alert type="info">

The tag 'latest' is not supported, please use a specific tag.

</Alert>

<p align="center">
  <img src="/img/configuration/application/app-general-registry.png" alt="General Settings Git" />
</p>

#### Build Mode
This option is available only if you have selected "Git Repository" as source
#### Option 1: Buildpacks

To simplify the application build for the developer, Qovery supports [Buildpacks](https://buildpacks.io) out of the box. Buildpacks determine the build process for an app and which assets and runtimes should be made available to your code at runtime. If your complex apps are running multiple languages, you can also use multiple buildpacks within a single app.
Meaning, as a developer, you don't need to write a `Dockerfile` to build and run your app. Qovery Buildpacks takes care of everything for you.

**Supported languages**

| language   | version |
|------------|---------|
| Node.JS    | any     |
| Clojure    | any     |
| Python     | any     |
| Java       | any     |
| Gradle     | any     |
| JVM        | any     |
| Grails     | any     |
| Scala      | any     |
| Play       | any     |
| PHP        | any     |
| Go         | any     |

You don't find a cool language? [Suggest us to support it][urls.qovery_roadmap]

#### Option 2: Dockerfile

Qovery runs your application within the [Container technology](https://www.docker.com/resources/what-container). To build and run your application, you need to provide a valid [Dockerfile](https://docs.docker.com/engine/reference/builder).

```Dockerfile title="Valid NodeJS Dockerfile"
FROM node:13-alpine
RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app
COPY . .
RUN npm install
EXPOSE 3000
CMD node ./bin/www
```

After creating a Dockerfile, specify the location of your Dockerfile in `Dockefile path` field.

Configuration from above will make Qovery look for the Dockerfile in `/timescale/Dockerfile` path of your repository (`Root Application Path` + `Dockerfile Path`).

### Resources

<p align="center">
  <img src="/img/configuration/application/app-13.png" alt="CPU" />
</p>

#### CPU

To configure the number of CPUs that your app needs, adjust the setting in the `Resources` section of the application configuration.

<Alert type="info">

Default is 500m (0.5 vCPU). 

</Alert>

Please note that in this section you configure the CPU allocated by the cluster for your application and that cannot consume more than this value. Even if the application is underused and consume less resources, the cluster will still reserve the selected amount of CPU.

#### RAM

To configure the amount of RAM that your app needs, adjust the setting in `Resources` section of the application configuration.

<Alert type="info">

Default is 512MB.

</Alert>

Please note that in this section you configure the CPU allocated by the cluster for your application and that cannot consume more than this value. Even if the application is underused and consume less resources, the cluster will still reserve the selected amount of CPU. If your application requires more RAM than requested, it will be killed by the kubernetes scheduler.

#### Auto-scaling

Application auto-scaling is based on real-time CPU consumption. When your app goes above 60% of CPU consumption for 5 minutes, your app will be auto-scaled and more instances will be added. It is transparent.
You can adjust the minimum and maximum of instances you need in your application settings. Qovery runs your application on Kubernetes and relies on [metrics-server](https://github.com/kubernetes-sigs/metrics-server) service to auto-scale your app.

### Storage

#### Block Storage

The default filesystem for applications running on Qovery is ephemeral. Application data isn’t persisted across deploys and restarts, which works just fine for most apps because they use managed databases to persist data.

However, many applications need persistent disk storage that isn’t ephemeral. These include:

* Blogging platforms and CMSs like WordPress, Ghost, and Strapi.
* Collaboration apps like Mattermost, GitLab, and Discourse.

This is where Qovery block Storage comes in. Qovery applications can use storage to store data that persists across deploys and restarts, making it easy to deploy stateful applications.

<Alert type="warning">

For most use cases, it is better to use [Object Storage][docs.using-qovery.configuration.object-storage] instead of Block Storage.

</Alert>

###### Use cases

###### ✅ Good use cases

- For I/O intensive applications (E.g. database)
- To store temporary files

###### ❌ Bad use cases

- To store file > 1 TB
- To expose files from an application (E.g. images)

##### Types of Block Storage

Qovery Storage supports:

| Type     | Max IOPS | Max Throughput | Min Size | Max Size                          | Use cases                                                                 |
|----------|----------|----------------|----------|-----------------------------------|---------------------------------------------------------------------------|
| fast_ssd | 64000    | 1GB/s          | 5GB      | 10GB `Community` / 1TB paid plans | Critical business applications that require sustained IOPS like databases |

##### Configuration

You can set up your Block Storage in `Storage` section of your application configuration.

<p align="center">
  <img src="/img/configuration/application/app-7.png" alt="Application Storage" />
</p>

<Alert type="info">

Storage can be added only if the application has never been deployed before AND if it runs only with one instance (check the [Resources section][docs.configuration.application#resources])

</Alert>

### Ports

Within this section you can define the port exposed by your application to the other services or even over the internet.
You can edit the existing ports or declare new ones by specifying:
- Application port: this is the port exposed internally by your application for the other services. Kubernetes will use this port to verify the readiness and liveness of your application via regular probes.
- Publicly exposed: it allows you to expose over the public network your service. A public domainill be assigned to your application during the deployment.
- External port: it is the port that can be used to access this service over the internet (when exposed publicly). Today we support only the HTTPS and Websocket protocols (on the 443 port)

<p align="center">
  <img src="/img/configuration/application/app-15.png" alt="Application Ports" />
</p>dsada

<Alert type="info">
Qovery determines the readiness of your service based on the availability of the declared port. If your application does not open this port within 10 minutes, the associated container will be shut down
</Alert>

#### Exposing Applications
Please take note of the following information:
- You can configure your application to use the **PORT** environment variable by adding the **PORT** on your application env variables page.
- Connections on public ports are automatically closed after 60 seconds. If you want to implement long living connection (like for websockets) please make sure to use the rigth ingress timeouts in the [advanced settings section][docs.using-qovery.configuration.advanced-settings#network-settings]
- A Note on Listening IPs: It's best for your application to listen on `0.0.0.0:$PORT`. While most things work with `127.0.0.1` and `localhost`, some do not (NodeJS for example)

### Domains

`Domain` section of your application configuration allows you to define a custom domain for your application.

<p align="center">
  <img src="/img/configuration/application/app-16.png" alt="Application Domains" />
</p>

After setting up a custom domain, you'll see a `Value` that you need to set up as a `CNAME` record in your domain registrar.

<Alert type="info">

[We prepared a guide and video tutorial that explains how to set up your custom domain.][guides.getting-started.setting-custom-domain]

</Alert>

Setting up the `CNAME` on the domain provider side will make your app accessible through your custom domain on Qovery.

## Connecting to a database
To know how to access your database from your application, [have a look at the database section][docs.using-qovery.configuration.environment-variable#connecting-to-a-database].

## Connecting to another application

To know how to access your database from your application, [have a look at the database section][docs.using-qovery.configuration.environment-variable#connecting-to-another-application].

## Environment Variable

To learn how to set up environment variables in your projects and applications, navigate to [configuring Environment Variables][docs.using-qovery.configuration.environment-variable] section.

## Secrets

To learn how to set up secrets in your projects and applications, navigate to [configuring Secrets][docs.using-qovery.configuration.environment-variable] section.

## Logs

To learn how to display your application logs, navigate to [logs section in our Debugging guide][guides.getting-started.debugging#logs]

## SSH

To connect to your application via SSH, please use the via the [Qovery SSH command][docs.using-qovery.interface.cli] available on our CLI.

## Deploy other version

<Steps headingDepth={3}>
<ol>
<li>

Choose your application

</li>
<li>

In the application overview, click on the `Play` button and `Deploy Other Version`.

<p align="center">
  <img src="/img/configuration/application/deploy-other-version.png" alt="Update All" />
</p>

</li>
<li>

Once you click, this panel will appear, and you will be able to choose the version you wish to update/rollback (either git commit or image Tag).

<p align="center">
  <img src="/img/configuration/application/deploy-other-version2.png" alt="Application" />
</p>

</li>
</ol>
</Steps>

## Delete an Application

<Steps headingDepth={3}>
<ol>
<li>

Choose your application

</li>
<li>

In the application overview, click on the `3 dots` button and remove the application.

<p align="center">
  <img src="/img/configuration/application/app-1.png" alt="Application" />
</p>

</li>
</ol>
</Steps>
