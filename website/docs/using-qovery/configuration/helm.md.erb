---
title: "Helm"
description: "Learn how to configure your Helm on Qovery"
---
import Jump from '@site/src/components/Jump';
import Alert from '@site/src/components/Alert';
import Assumptions from '@site/src/components/Assumptions';

<Assumptions name="documentation">

You have created an [Environment][docs.using-qovery.configuration.environment].

</Assumptions>

A **helm** is part of a [Project][docs.using-qovery.configuration.project] within an [Environment][docs.using-qovery.configuration.environment]. Multiple helms can be part of the same [Environment][docs.using-qovery.configuration.environment], be connected to a set of dependencies (databases and other services), and can communicate with other applications within the same Environment.

Qovery allows you to create and deploy helms from two different sources: Git Repository or Helm Repository

## Deploying from a Git Repository
In this configuration, Qovery will pull the chart from the chosen repository, with defaults values file and install it on your kubernetes cluster.

The list of Git repositories available during the setup is strictly tied to the permissions of your git account (by default Qovery can access all your repositories). If you want to restrict the Qovery access only to a few repositories, user the [GitHub Qovery Application][docs.using-qovery.configuration.organization.git-repository-access] (only for Github).

## Deploying from a Helm Repository
In this configuration, Qovery will pull the chosen helm repository a chart and install it on your kubernetes cluster.

To improve security and avoid deploying charts from non-authorized repositories, we have decided to restrict the list of Helm Repositories you can use during the setup process. Only an administrator with the right permissions can manage it from the [Helm Repository Management page][docs.using-qovery.configuration.organization.helm-repository]

## Create a Helm

<Steps headingDepth={3}>
<ol>
<li>

Go into the chosen environment and press the "New Service" button and then the "Create helm" button

<p align="center"> #TOTO Change screenshot
  <img src="/img/configuration/application/creation_1.png" alt="Creation" />
</p>

</li>
<li>

Select the following fields:
- Helm chart Name: give a name to your helm
- Helm chart Source: Chose between Git Repository or Helm Repository, depending on the source location of your application

If you want to deploy a helm from a Git Repository you will have to select:
- Git Repository: Select the git provider hosting your code (it can be hosted on GitHub, GitLab or Bitbucket).
- Branch: Select branch that Qovery should use to deploy your helm
- Root Helm Path: base folder in which the helm chart resides in your repository

If you want to deploy a helm from a Helm Repository you will have to select:
- Helm repository: select the helm repository storing the helm chart. Note: only pre-configured registry are available in this list, check the [Helm Repository Management page][docs.using-qovery.configuration.organization.helm-repository] for more information.
- Chart name: the name of the helm to be deployed with this application (example: jenkins)
- Chart version: the version of the chart to be deployed with this application (example: 1.0.0). 

- Helm arguments: specify the [helm arguments](https://helm.sh/docs/intro/using_helm/#helpful-options-for-installupgraderollback) to be used during the helm install/upgrade.
- Helm timeout: specify the value to wait for Kubernetes commands to complete. This defaults to 5mins.
- Allow cluster-wide resources: Allow this chart to deploy resources outside of the environment namespace. You must have the [full-access permissions][docs.using-qovery.configuration.organization.members-rbac] on the cluster. 

** Auto Deploy **

See the [Deploying with auto-deploy feature][docs.qovery.deployment.deploying-with-auto-deploy] section.

</li>
<li>

By default, the `values.yaml` next to your `chart.yaml` is used. But you can override it with another file.
Select the following field:
- File source: Chose between Git Repository or Raw YAML, depending on the source location of your values file

If you want to override it from another already existing values file from a Git Repository you will have to select:
- Git Repository: Select the git provider hosting your code (it can be hosted on GitHub, GitLab or Bitbucket).
- Branch: Select branch that Qovery should use to deploy your helm
- Overrides path: the path of the values files (example: ci/values_ci.yaml). You can specify multiple paths by separating them with a semi-colon.

If you want to override it with a raw yaml you will have to click on `Create override`. A new editor modal will be opened, to let you write your yaml override. The default values.yaml content will be displayed on the right to help you to respect the structure.

You can use the Qovery environment variables as overrides by using the placeholder “qovery.env.<env_var_name>” (Example: qovery.env.DB_URL. Qovery will manage the replacement of those placeholders at deployment time.

</li>
<li>

Specify each value override as argument. Select the following fiels:
- Variable: the variable name
- Value type: 
  - Select `Generic` to use the `--set` flag and pass configuration from the command line
  - Select `String` to use the `--set-string` flag to force a string value
  - Select `File` to use the `--set-file` flag to set individual values from a file when the value itself is too long for the command line or is dynamically generated
  - Select `Json` to use the `--set-json` flag to set json values (scalars/objects/arrays) from the command line
- Value

</li>
<li>

You can now expose publicly one or more ports for your services defined in the helm chart by specifying:
- Service name: this is the kubernetes service name in your helm chart
- Namespace (only if Allow cluster-wide resources was enabled): this is the kubernetes namespace in your helm chart
- Service port: this is the port exposed internally by your service for the other services
- Protocol: you can select the protocol used by your service. Today Qovery supports the following protocols:
  - HTTPS (Select this protocol if you need to run Websockets)
  - gRPC
- External port: it is the port that can be used to access this service over the internet (when exposed publicly). Note that for HTTP and gRPC the port is set by default to 443.
- Port Name: it is the name assigned to the port. When multiple ports are exposed publicly, its value is used to route the traffic to the right port based on the called subdomain (which will contain the port name value). Since each port is exposed on the port 443, having a different subdomain is the only way to have multiple ports exposed over the internet. If not set, the default value is `p<portNumber>` (see [Qovery Provided Domain section](#qovery-provided-domains) for more information)

By default ports are accessible only from inside your namespace(s). You can also expose them publicly, making them accessible over the public network via a dedicated public domain that will be assigned to your application by Qovery during the deployment (See the [Qovery Provided Domains section](#qovery-provided-domains)). Note that HTTPS/gRPC ports are always exposed over the port 443.

<p align="center"> #TODO Change screenshot
  <img src="/img/configuration/application/application_creation_port.png" alt="Application Ports" />
</p>


**Important Informations**

- Connections on public ports are automatically closed after 60 seconds. If you want to implement long living connection (like for websockets) please make sure to use the rigth ingress timeouts in the [advanced settings section][docs.using-qovery.configuration.advanced-settings#network-settings]

</li>

<li>

You will find a recap of your helm setup and you can now decide to:
- Go back to one of the previous steps and change your helm settings
- Create your helm without deploying it
- Create and deploy your helm

<p align="center"> #TODO Change screenshot
  <img src="/img/configuration/application/application_creation_recap.png" alt="Application" />
</p>

</li>
</ol>
</Steps>

## Deployment Management
Have a look at the [Deployment Management][docs.using-qovery.deployment] section for more information.

## Configuration

Once created, you can access the configuration of a helm at any time via the Settings tab available on the helm section

<p align="center"> #TODO Change screenshot
  <img src="/img/configuration/application/settings.png" alt="Application Settings" />
</p>

You can find below the description of each of the tabs available in this section

### General

General settings section allows you to set up the name and the source of your helm (git repository or helm repository) .

#### Git Repository
If your heml is from a git repository, within this section you can:
- Modify the git provider where your code is stored (it can be hosted on GitHub, GitLab or Bitbucket).
- Modify the branch that Qovery should use for deploying your application
- Modify `Root Helm Path` - base folder in which the helm chart resides in your repository

<p align="center"> #TODO Change screenshot
  <img src="/img/configuration/application/app-general-git.png" alt="General Settings Git" />
</p>

<Alert type="info">

Qovery supports mono repositories. [See our advanced guide for more details.][guides.advanced.monorepository]

</Alert>

<Alert type="warning">

If your repository contains private submodules using SSH protocol, you will need to add a secret beginning with GIT_SSH_KEY_, containing a private SSH key with access rights to your sumbodules repositories.

Secret names examples:

- GIT_SSH_KEY_GITHUB
- GIT_SSH_KEY_GITLAB
- GIT_SSH_KEY_MYAPP

</Alert>

#### Helm Repository
If your helm is deployed from a helm repository, within this section you can modify:
- Helm repository: select the helm repository storing the helm chart. Note: only pre-configured registry are available in this list, check the [Helm Repository Management page][docs.using-qovery.configuration.organization.helm-repository] for more information.
- Chart name: the name of the helm to be deployed with this application (example: jenkins)
- Chart version: the version of the chart to be deployed with this application (example: 1.0.0). 

#### Arguments
For both kind of helm source, within this section yoiu can modify:
- Helm arguments: specify the [helm arguments](https://helm.sh/docs/intro/using_helm/#helpful-options-for-installupgraderollback) to be used during the helm install/upgrade.
- Helm timeout: specify the value to wait for Kubernetes commands to complete. This defaults to 5mins.

<p align="center"> #TODO Change screenshot
  <img src="/img/configuration/application/app-general-registry.png" alt="General Settings Git" />
</p>

#### Auto Deploy

See the [Deploying with auto-deploy feature][docs.qovery.deployment.deploying-with-auto-deploy] section.

### Values

Within this section you can modify the values override.
Select the following field:
- File source: Chose between Git Repository or Raw YAML, depending on the source location of your values file

If you want to override it from another already existing values file from a Git Repository you will have to select:
- Git Repository: Select the git provider hosting your code (it can be hosted on GitHub, GitLab or Bitbucket).
- Branch: Select branch that Qovery should use to deploy your helm
- Overrides path: the path of the values files (example: ci/values_ci.yaml). You can specify multiple paths by separating them with a semi-colon.

If you want to override it with a raw yaml you will have to click on `Create override`. A new editor modal will be opened, to let you write your yaml override. The default values.yaml content will be displayed on the right to help you to respect the structure.

### Ports

Within this section you can define the port exposed publicly.
You can edit the existing ports or declare new ones by specifying:
- Service name: this is the kubernetes service name in your helm chart
- Namespace (only if Allow cluster-wide resources was enabled): this is the kubernetes namespace in your helm chart
- Service port: this is the port exposed internally by your service for the other services
- Protocol: you can select the protocol used by your service. Today Qovery supports the following protocols:
  - HTTPS (Select this protocol if you need to run Websockets)
  - gRPC
- External port: it is the port that can be used to access this service over the internet (when exposed publicly). Note that for HTTP and gRPC the port is set by default to 443.
- Port Name: it is the name assigned to the port. When multiple ports are exposed publicly, its value is used to route the traffic to the right port based on the called subdomain (which will contain the port name value). Since each port is exposed on the port 443, having a different subdomain is the only way to have multiple ports exposed over the internet. If not set, the default value is `p<portNumber>` (see [Qovery Provided Domain section](#qovery-provided-domains) for more information)

<p align="center"> #TODO Change screenshot
  <img src="/img/configuration/application/app-15.png" alt="Application Ports" />
</p>


#### Important Informations

- Connections on public ports are automatically closed after 60 seconds. If you want to implement long living connection (like for websockets) please make sure to use the rigth ingress timeouts in the [advanced settings section][docs.using-qovery.configuration.advanced-settings#network-settings]

### Domains

<%= configure_domains("helm services") %>

## Logs

To learn how to display your helm logs, navigate to [logs section][docs.using-qovery.deployment.logs#live-logs]

## Clone

<%= clone_service() %>

## Delete a Helm

<Steps headingDepth={3}>
<ol>
<li>

Choose your helm

</li>
<li>

In the helm overview, click on the `3 dots` button and remove the helm.

<p align="center"> #TODO Change screenshot
  <img src="/img/configuration/application/app-1.png" alt="Application" />
</p>

</li>
</ol>
</Steps>
