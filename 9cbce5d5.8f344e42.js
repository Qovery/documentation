/*! For license information please see 9cbce5d5.8f344e42.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[190],{342:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return b})),n.d(t,"rightToc",(function(){return u})),n.d(t,"default",(function(){return p}));var a=n(1),i=n(9),r=(n(0),n(477)),c=n(484),o=n(476),l=n(481),s=(n(485),{last_modified_on:"2025-01-12",$schema:"/.meta/.schemas/guides.json",title:"How to configure IP and header-based authorization",description:"How to configure IP and header-based authorization on Qovery.",author_github:"https://github.com/benjaminch",tags:["type: tutorial","technology: qovery"],hide_pagination:!0}),b={categories:[{name:"tutorial",title:"Tutorial",description:"Additional step-by-step resources to leverage even more Qovery",permalink:"/guides/tutorial"}],coverLabel:"How to configure IP and header-based authorization",description:"How to configure IP and header-based authorization on Qovery.",permalink:"/guides/tutorial/how-to-setup-ip-and-header-based-authorization",readingTime:"12 min read",source:"@site/guides/tutorial/how-to-setup-ip-and-header-based-authorization.md",tags:[{label:"type: tutorial",permalink:"/guides/tags/type-tutorial"},{label:"technology: qovery",permalink:"/guides/tags/technology-qovery"}],title:"How to configure IP and header-based authorization",truncated:!1,prevItem:{title:"How to Build a Cloud Version of Your Open Source Software - A Case Study with AppWrite - Part 3",permalink:"/guides/tutorial/how-to-build-a-cloud-version-of-your-open-source-software-part-3"},nextItem:{title:"How to connect to a managed MongoDB instance on AWS",permalink:"/guides/tutorial/how-to-connect-to-a-managed-mongodb-instance-on-aws"}},u=[{value:"Goal",id:"goal",children:[]},{value:"Initial setup",id:"initial-setup",children:[{value:"Configure cluster",id:"configure-cluster",children:[]}]},{value:"Configuring IP and HTTP header-based authorization",id:"configuring-ip-and-http-header-based-authorization",children:[]},{value:"Testing the whitelist rule",id:"testing-the-whitelist-rule",children:[]},{value:"Conclusion",id:"conclusion",children:[]}],d={rightToc:u};function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)(o.a,{type:"warning",mdxType:"Alert"},"Changing NGINX snippets configuration is an advanced feature and can lead to misconfiguration. Please be careful when changing these settings as it might break the whole NGINX configuration and thus make impossible to reach your services."),Object(r.b)("p",null,"In this tutorial, we will walk you through configuring IP and HTTP header-based authorization on your service running on Qovery Managed Cluster.\nThis setup is particularly useful for multi-tenant systems, where access to different workspaces or services depends on a combination of the client's IP address and a specific header."),Object(r.b)(l.a,{name:"guide",mdxType:"Assumptions"},Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Your service is running on a Qovery managed cluster."))),Object(r.b)("h2",{id:"goal"},"Goal"),Object(r.b)("p",null,"This tutorial will cover how to setup IP and HTTP header-based authorization on your services by customizing Nginx configuration."),Object(r.b)("p",null,"Here's the business requirement we have for this tutorial:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"All incoming requests come with a custom HTTP header ",Object(r.b)("inlineCode",{parentName:"p"},"X-QOVERY-SOURCE")," representing source of the request, let's say it can be one of the following values: ",Object(r.b)("inlineCode",{parentName:"p"},"staging"),", ",Object(r.b)("inlineCode",{parentName:"p"},"production")," or ",Object(r.b)("inlineCode",{parentName:"p"},"development"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Every Qovery source has a specific IP range:"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"staging"),": ",Object(r.b)("inlineCode",{parentName:"li"},"10.42.0.0/16"),", ",Object(r.b)("inlineCode",{parentName:"li"},"10.43.0.0/16")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"production"),": ",Object(r.b)("inlineCode",{parentName:"li"},"10.44.0.0/16")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"development"),": ",Object(r.b)("inlineCode",{parentName:"li"},"92.xxx.xx.171")," (my office IP address, I will use to test the setup)"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Every request coming from an address IP not in the range of the source should be rejected.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Reject any requests without the ",Object(r.b)("inlineCode",{parentName:"p"},"X-QOVERY-SOURCE")," header."))),Object(r.b)("h2",{id:"initial-setup"},"Initial setup"),Object(r.b)(c.a,{headingDepth:3,mdxType:"Steps"},Object(r.b)("ol",null,Object(r.b)("li",null,Object(r.b)("h3",{id:"configure-cluster"},"Configure cluster"),Object(r.b)("p",null,"For this example, I will configure Nginx to enable ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://hub.qovery.com/docs/using-qovery/configuration/cluster-advanced-settings/#nginxcontrollerenable_client_ip"}),"nginx.controller.enable_client_ip")," and ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://hub.qovery.com/docs/using-qovery/configuration/cluster-advanced-settings/#nginxcontrollercompute_full_forwarded_for"}),"nginx.controller.compute_full_forwarded_for"),".\nIt will allow me to better illustrate the whitelist configuration."),Object(r.b)("p",{align:"center"},Object(r.b)("img",{src:"/img/nginx-configure-ip-and-header-based-authorization/cluster-advanced-settings-enable-real-ip-and-compute-full-forwarded-for.png",alt:"Cluster initial setup in Qovery console"}))),Object(r.b)("li",null,Object(r.b)("h4",{id:"configure-service"},"Configure service"),Object(r.b)("p",null,"I will use a basic container service ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://hub.docker.com/r/jmalloc/echo-server"}),"echo-server")," setup with Qovery.\nThis service is listening on port 80."),Object(r.b)("p",{align:"center"},Object(r.b)("img",{src:"/img/nginx-configure-ip-and-header-based-authorization/service-initial-setup-qovery-screen.png",alt:"Service initial setup in Qovery console"})),Object(r.b)("p",null,"To start with, this service don't have any whitelisting in place, everything will be accepted.")),Object(r.b)("li",null,Object(r.b)("h4",{id:"testing-querying-the-service"},"Testing querying the service"),Object(r.b)("p",null,"Testing the service to make sure it's working as expected."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'\u276f curl -v -s https://p8080-zdb6be5b9-z928629ac-gtw.z77ccfcb8.slab.sh/\n*   Trying 52.47.212.175:443...\n* Connected to p8080-zdb6be5b9-z928629ac-gtw.z77ccfcb8.slab.sh (52.47.212.175) port 443\n* ALPN: curl offers h2,http/1.1\n* (304) (OUT), TLS handshake, Client hello (1):\n*  CAfile: /etc/ssl/cert.pem\n*  CApath: none\n* (304) (IN), TLS handshake, Server hello (2):\n* (304) (IN), TLS handshake, Unknown (8):\n* (304) (IN), TLS handshake, Certificate (11):\n* (304) (IN), TLS handshake, CERT verify (15):\n* (304) (IN), TLS handshake, Finished (20):\n* (304) (OUT), TLS handshake, Finished (20):\n* SSL connection using TLSv1.3 / AEAD-AES256-GCM-SHA384\n* ALPN: server accepted h2\n* Server certificate:\n*  subject: CN=*.z77ccfcb8.slab.sh\n*  start date: Dec 30 08:35:19 2024 GMT\n*  expire date: Mar 30 08:35:18 2025 GMT\n*  subjectAltName: host "p8080-zdb6be5b9-z928629ac-gtw.z77ccfcb8.slab.sh" matched cert\'s "*.z77ccfcb8.sl\n*  issuer: C=US; O=Let\'s Encrypt; CN=R11\n*  SSL certificate verify ok.\n* using HTTP/2\n* [HTTP/2] [1] OPENED stream for https://p8080-zdb6be5b9-z928629ac-gtw.z77ccfcb8.slab.sh/\n* [HTTP/2] [1] [:method: GET]\n* [HTTP/2] [1] [:scheme: https]\n* [HTTP/2] [1] [:authority: p8080-zdb6be5b9-z928629ac-gtw.z77ccfcb8.slab.sh]\n* [HTTP/2] [1] [:path: /]\n* [HTTP/2] [1] [user-agent: curl/8.4.0]\n* [HTTP/2] [1] [accept: */*]\n> GET / HTTP/2\n> Host: p8080-zdb6be5b9-z928629ac-gtw.z77ccfcb8.slab.sh\n> User-Agent: curl/8.4.0\n> Accept: */*\n>\n< HTTP/2 200\n< date: Sun, 12 Jan 2025 15:31:07 GMT\n< content-type: text/plain\n< content-length: 429\n< strict-transport-security: max-age=31536000; includeSubDomains\n<\nRequest served by app-zc6971a47-service-example-66b74b556d-l4kk6\n\nGET / HTTP/1.1\n\nHost: p8080-zdb6be5b9-z928629ac-gtw.z77ccfcb8.slab.sh\nAccept: */*\nUser-Agent: curl/8.4.0\nX-Forwarded-For: 92.xxx.xx.171\nX-Forwarded-Host: p8080-zdb6be5b9-z928629ac-gtw.z77ccfcb8.slab.sh\nX-Forwarded-Port: 443\nX-Forwarded-Proto: https\nX-Forwarded-Scheme: https\nX-Real-Ip: 92.xxx.xx.171\nX-Request-Id: 9e0119afcd2fcbb1b45ac1131ba82a15\nX-Scheme: https\n* Connection #0 to host p8080-zdb6be5b9-z928629ac-gtw.z77ccfcb8.slab.sh left intact\n')),Object(r.b)("p",null,"All good!")))),Object(r.b)("h2",{id:"configuring-ip-and-http-header-based-authorization"},"Configuring IP and HTTP header-based authorization"),Object(r.b)(c.a,{headingDepth:3,mdxType:"Steps"},Object(r.b)("ol",null,Object(r.b)("li",null,Object(r.b)("h4",{id:"declare-whitelisting-configuration-at-cluster-level"},"Declare whitelisting configuration at cluster level"),Object(r.b)("p",null,"In order to set a whitelisting configuration, we need to declare it at cluster level in cluster advanced settings ",Object(r.b)("inlineCode",{parentName:"p"},"nginx.controller.http_snippet")," (see ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://hub.qovery.com/docs/using-qovery/configuration/cluster-advanced-settings/#nginxcontrollerhttp_snippet"}),"documentation"),")."),Object(r.b)("p",null,"Here's nginx ",Object(r.b)("inlineCode",{parentName:"p"},"nginx.controller.http_snippet")," value we will set:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-nginx"}),'# Whitelisting\ngeo $production {\n  default 0;      # 0 as default value for unmatched IPs\n  10.44.0.0/16 1; # 1 if source IP is within the range\n}\n\ngeo $staging {\n  default 0;      # 0 as default value for unmatched IPs\n  10.42.0.0/16 1; # 1 if source IP is within the range\n  10.43.0.0/16 1; # 1 if source IP is within the range\n}\n\ngeo $development {\n  default 0;          # 0 as default value for unmatched IPs\n  92.xxx.xx.171/32 1; # 1 if source IP is this exact IP (some values were replaced by x for privacy)\n}\n\nmap $http_x_qovery_source $is_authorized_source {\n  default 0;\n  "production" $production;\n  "staging" $staging;\n  "development" $development;\n}\n')),Object(r.b)("strong",null,"Details"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"The ",Object(r.b)("inlineCode",{parentName:"li"},"geo")," directive creates variables based on the client's IP address, allowing you to classify them into groups. In this case, the ",Object(r.b)("inlineCode",{parentName:"li"},"geo")," blocks define access for production and staging environments.",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"geo $production"),": creates a variable $production to determine if the client IP is part of the allowed range.",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"default 0;"),": default value is ",Object(r.b)("inlineCode",{parentName:"li"},"0"),", meaning any IP that does not match explicitly will be denied."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"10.44.0.0/16 1"),": ",Object(r.b)("inlineCode",{parentName:"li"},"10.44.0.0/16")," range is assigned the value ",Object(r.b)("inlineCode",{parentName:"li"},"1"),", meaning it's allowed."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"geo $staging"),": creates a variable $staging.",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"default 0;"),": default value is ",Object(r.b)("inlineCode",{parentName:"li"},"0"),", meaning any IP that does not match explicitly will be denied."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"10.43.0.0/16 1"),": ",Object(r.b)("inlineCode",{parentName:"li"},"10.43.0.0/16")," range is assigned the value ",Object(r.b)("inlineCode",{parentName:"li"},"1"),", meaning it's allowed."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"10.42.0.0/16 1"),": ",Object(r.b)("inlineCode",{parentName:"li"},"10.42.0.0/16")," range is assigned the value ",Object(r.b)("inlineCode",{parentName:"li"},"1"),", meaning it's allowed."))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"geo $development"),": creates a variable $development to determine if the client IP is part of the allowed range.",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"default 0;"),": default value is ",Object(r.b)("inlineCode",{parentName:"li"},"0"),", meaning any IP that does not match explicitly will be denied."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"92.xxx.xx.171/32 1"),": ",Object(r.b)("inlineCode",{parentName:"li"},"92.xxx.xx.171/32")," IP is assigned the value ",Object(r.b)("inlineCode",{parentName:"li"},"1"),", meaning it's allowed."))))),Object(r.b)("li",{parentName:"ul"},"The ",Object(r.b)("inlineCode",{parentName:"li"},"map")," directive is used to derive a new variable (",Object(r.b)("inlineCode",{parentName:"li"},"$is_authorized_source"),") based on the value of another variable (",Object(r.b)("inlineCode",{parentName:"li"},"$http_x_qovery_source"),").",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"map $http_x_qovery_source $is_authorized_source"),": the value of the ",Object(r.b)("inlineCode",{parentName:"li"},"X-Qovery-Source")," HTTP header (",Object(r.b)("inlineCode",{parentName:"li"},"$http_x_qovery_source"),") determines the ",Object(r.b)("inlineCode",{parentName:"li"},"$is_authorized_source")," variable.",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"default 0;"),": if the ",Object(r.b)("inlineCode",{parentName:"li"},"X-Qovery-Source")," header does not match any specified key, ",Object(r.b)("inlineCode",{parentName:"li"},"$is_authorized_source")," is set to ",Object(r.b)("inlineCode",{parentName:"li"},"0"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},'"production" $production'),": if ",Object(r.b)("inlineCode",{parentName:"li"},"X-Qovery-Source")," is ",Object(r.b)("inlineCode",{parentName:"li"},'"production"'),", the ",Object(r.b)("inlineCode",{parentName:"li"},"$is_authorized_source")," will take the value of ",Object(r.b)("inlineCode",{parentName:"li"},"$production")," (either ",Object(r.b)("inlineCode",{parentName:"li"},"0")," or ",Object(r.b)("inlineCode",{parentName:"li"},"1"),", depending on the client's IP range)."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},'"staging" $staging'),": similarly, if ",Object(r.b)("inlineCode",{parentName:"li"},"X-Qovery-Source")," is ",Object(r.b)("inlineCode",{parentName:"li"},'"staging"'),", ",Object(r.b)("inlineCode",{parentName:"li"},"$is_authorized_source")," will take the value of ",Object(r.b)("inlineCode",{parentName:"li"},"$staging")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},'"development" $development'),": similarly, if ",Object(r.b)("inlineCode",{parentName:"li"},"X-Qovery-Source")," is ",Object(r.b)("inlineCode",{parentName:"li"},'"development"'),", ",Object(r.b)("inlineCode",{parentName:"li"},"$is_authorized_source")," will take the value of ",Object(r.b)("inlineCode",{parentName:"li"},"$development"))))))),Object(r.b)("p",{align:"center"},Object(r.b)("img",{src:"/img/nginx-configure-ip-and-header-based-authorization/cluster-advanced-settings-set-http-snippet-with-whitelisting-rule.png",alt:"Declare whitelisting rule in cluster advanced settings"}))),Object(r.b)("li",null,Object(r.b)("h4",{id:"use-this-whitelisting-rule-in-cluster-configuration"},"Use this whitelisting rule in cluster configuration"),Object(r.b)("p",null,"Now that our whitelisting rule is defined, let use it in our cluster configuration."),Object(r.b)("p",null,"In order to do so, we need to declare this server snippet at cluster level in advanced settings ",Object(r.b)("inlineCode",{parentName:"p"},"nginx.controller.server_snippet")," (see ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://hub.qovery.com/docs/using-qovery/configuration/cluster-advanced-settings/#nginxcontrollerserver_snippet"}),"documentation"),"):"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-nginx"}),"add_header X-debug-source $http_x_qovery_source always;\nadd_header X-debug-ip $remote_addr always;\nadd_header X-debug-is-authorized $is_authorized_source always;\n\nif ($is_authorized_source = 0) {\n  return 403;  # Forbidden\n}\n")),Object(r.b)("strong",null," Details "),Object(r.b)("p",null,"This snippet will return an HTTP ",Object(r.b)("inlineCode",{parentName:"p"},"403")," for any request that does not match the whitelisting rule we defined earlier.\nIn order to ease setup and debug, I've added some headers to the response:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"X-debug-source"),": the value of the ",Object(r.b)("inlineCode",{parentName:"li"},"X-Qovery-Source")," header."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"X-debug-ip"),": the client's IP address."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"X-debug-is-authorized"),": whether the request is authorized or not.")),Object(r.b)("p",{align:"center"},Object(r.b)("img",{src:"/img/nginx-configure-ip-and-header-based-authorization/cluster-advanced-settings-whitelisting-in-server-snippet.png",alt:"Declare service whitelisting rule in advanced settings"}))),Object(r.b)("li",null,Object(r.b)("h4",{id:"deploy-your-cluster"},"Deploy your cluster"),Object(r.b)("p",null,"You can now deploy your cluster with the new settings."),Object(r.b)("p",{align:"center"},Object(r.b)("img",{src:"/img/nginx-configure-ip-and-header-based-authorization/deploy-cluster-after-advanced-settings-changes.png",alt:"Deploy cluster after advanced settings changes"}))))),Object(r.b)("h2",{id:"testing-the-whitelist-rule"},"Testing the whitelist rule"),Object(r.b)("p",null,"Let's test our setup"),Object(r.b)(c.a,{headingDepth:3,mdxType:"Steps"},Object(r.b)("ol",null,Object(r.b)("li",null,Object(r.b)("h4",{id:"case-1-no-header-ip-outside-any-whitelisted-ranges"},"Case 1: No header, IP outside any whitelisted ranges"),Object(r.b)("p",null,"For this test, I will send a request without the ",Object(r.b)("inlineCode",{parentName:"p"},"X-QOVERY-SOURCE")," header and from an IP address outside the allowed ranges."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'\u276f curl -v -s https://p8080-zdb6be5b9-z928629ac-gtw.z77ccfcb8.slab.sh/\n*   Trying 13.38.142.29:443...\n* Connected to p8080-zdb6be5b9-z928629ac-gtw.z77ccfcb8.slab.sh (13.38.142.29) port 443\n* ALPN: curl offers h2,http/1.1\n* (304) (OUT), TLS handshake, Client hello (1):\n*  CAfile: /etc/ssl/cert.pem\n*  CApath: none\n* (304) (IN), TLS handshake, Server hello (2):\n* (304) (IN), TLS handshake, Unknown (8):\n* (304) (IN), TLS handshake, Certificate (11):\n* (304) (IN), TLS handshake, CERT verify (15):\n* (304) (IN), TLS handshake, Finished (20):\n* (304) (OUT), TLS handshake, Finished (20):\n* SSL connection using TLSv1.3 / AEAD-AES256-GCM-SHA384\n* ALPN: server accepted h2\n* Server certificate:\n*  subject: CN=*.z77ccfcb8.slab.sh\n*  start date: Dec 30 08:35:19 2024 GMT\n*  expire date: Mar 30 08:35:18 2025 GMT\n*  subjectAltName: host "p8080-zdb6be5b9-z928629ac-gtw.z77ccfcb8.slab.sh" matched cert\'s "*.z77ccfcb8.slab.sh"\n*  issuer: C=US; O=Let\'s Encrypt; CN=R11\n*  SSL certificate verify ok.\n* using HTTP/2\n* [HTTP/2] [1] OPENED stream for https://p8080-zdb6be5b9-z928629ac-gtw.z77ccfcb8.slab.sh/\n* [HTTP/2] [1] [:method: GET]\n* [HTTP/2] [1] [:scheme: https]\n* [HTTP/2] [1] [:authority: p8080-zdb6be5b9-z928629ac-gtw.z77ccfcb8.slab.sh]\n* [HTTP/2] [1] [:path: /]\n* [HTTP/2] [1] [user-agent: curl/8.4.0]\n* [HTTP/2] [1] [accept: */*]\n> GET / HTTP/2\n> Host: p8080-zdb6be5b9-z928629ac-gtw.z77ccfcb8.slab.sh\n> User-Agent: curl/8.4.0\n> Accept: */*\n>\n< HTTP/2 403\n< date: Sun, 12 Jan 2025 15:49:20 GMT\n< content-type: text/html\n< content-length: 146\n< x-debug-ip: 45.84.136.102\n< x-debug-is-authorized: 0\n<\n<html>\n<head><title>403 Forbidden</title></head>\n<body>\n<center><h1>403 Forbidden</h1></center>\n<hr><center>nginx</center>\n</body>\n</html>\n* Connection #0 to host p8080-zdb6be5b9-z928629ac-gtw.z77ccfcb8.slab.sh left intact\n')),Object(r.b)("p",null,"As we can see I've got an HTTP ",Object(r.b)("inlineCode",{parentName:"p"},"403")," status code, meaning the request was rejected."),Object(r.b)("p",null,"Debug headers values:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"< x-debug-ip: 45.84.136.102\n< x-debug-is-authorized: 0\n")),Object(r.b)("p",null,"NGINX controller logs showing the request was rejected."),Object(r.b)("p",{align:"center"},Object(r.b)("img",{src:"/img/nginx-configure-ip-and-header-based-authorization/nginx-logs-403-no-header-ip-outside-whitelist.png",alt:"NGINX logs showing requests rejections for request without header and ip address outside whitelisted ranges"}))),Object(r.b)("li",null,Object(r.b)("h4",{id:"case-2-header-production-ip-outside-any-whitelisted-ranges"},"Case 2: Header ",Object(r.b)("inlineCode",{parentName:"h4"},"production"),", IP outside any whitelisted ranges"),Object(r.b)("p",null,"For this test, I will send a request with the ",Object(r.b)("inlineCode",{parentName:"p"},"X-QOVERY-SOURCE: production")," header and from an IP address outside the allowed ranges."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"\u276f curl -v -H 'X-QOVERY-SOURCE: production' -s https://p8080-zdb6be5b9-z928629ac-gtw.z77ccfcb8.slab.sh/\n*   Trying 13.38.142.29:443...\n* Connected to p8080-zdb6be5b9-z928629ac-gtw.z77ccfcb8.slab.sh (13.38.142.29) port 443\n* ALPN: curl offers h2,http/1.1\n* (304) (OUT), TLS handshake, Client hello (1):\n*  CAfile: /etc/ssl/cert.pem\n*  CApath: none\n* (304) (IN), TLS handshake, Server hello (2):\n* (304) (IN), TLS handshake, Unknown (8):\n* (304) (IN), TLS handshake, Certificate (11):\n* (304) (IN), TLS handshake, CERT verify (15):\n* (304) (IN), TLS handshake, Finished (20):\n* (304) (OUT), TLS handshake, Finished (20):\n* SSL connection using TLSv1.3 / AEAD-AES256-GCM-SHA384\n* ALPN: server accepted h2\n* Server certificate:\n*  subject: CN=*.z77ccfcb8.slab.sh\n*  start date: Dec 30 08:35:19 2024 GMT\n*  expire date: Mar 30 08:35:18 2025 GMT\n*  subjectAltName: host \"p8080-zdb6be5b9-z928629ac-gtw.z77ccfcb8.slab.sh\" matched cert's \"*.z77ccfcb8.slab.sh\"\n*  issuer: C=US; O=Let's Encrypt; CN=R11\n*  SSL certificate verify ok.\n* using HTTP/2\n* [HTTP/2] [1] OPENED stream for https://p8080-zdb6be5b9-z928629ac-gtw.z77ccfcb8.slab.sh/\n* [HTTP/2] [1] [:method: GET]\n* [HTTP/2] [1] [:scheme: https]\n* [HTTP/2] [1] [:authority: p8080-zdb6be5b9-z928629ac-gtw.z77ccfcb8.slab.sh]\n* [HTTP/2] [1] [:path: /]\n* [HTTP/2] [1] [user-agent: curl/8.4.0]\n* [HTTP/2] [1] [accept: */*]\n* [HTTP/2] [1] [x-qovery-source: production]\n> GET / HTTP/2\n> Host: p8080-zdb6be5b9-z928629ac-gtw.z77ccfcb8.slab.sh\n> User-Agent: curl/8.4.0\n> Accept: */*\n> X-QOVERY-SOURCE: production\n>\n< HTTP/2 403\n< date: Sun, 12 Jan 2025 15:59:54 GMT\n< content-type: text/html\n< content-length: 146\n< x-debug-source: production\n< x-debug-ip: 45.84.136.102\n< x-debug-is-authorized: 0\n<\n<html>\n<head><title>403 Forbidden</title></head>\n<body>\n<center><h1>403 Forbidden</h1></center>\n<hr><center>nginx</center>\n</body>\n</html>\n* Connection #0 to host p8080-zdb6be5b9-z928629ac-gtw.z77ccfcb8.slab.sh left intact\n")),Object(r.b)("p",null,"As we can see I've got an HTTP ",Object(r.b)("inlineCode",{parentName:"p"},"403")," status code, meaning the request was rejected."),Object(r.b)("p",null,"Debug headers values:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"< x-debug-source: production\n< x-debug-ip: 45.84.136.102\n< x-debug-is-authorized: 0\n")),Object(r.b)("p",null,"NGINX controller logs showing the request was rejected."),Object(r.b)("p",{align:"center"},Object(r.b)("img",{src:"/img/nginx-configure-ip-and-header-based-authorization/nginx-logs-403-header-production-ip-outside-whitelist.png",alt:"NGINX logs showing requests rejections for request with header production and ip address outside whitelisted ranges"}))),Object(r.b)("li",null,Object(r.b)("h4",{id:"case-3-header-development-ip-inside-whitelisted-ranges"},"Case 3: Header ",Object(r.b)("inlineCode",{parentName:"h4"},"development"),", IP inside whitelisted ranges"),Object(r.b)("p",null,"For this test, I will send a request with the ",Object(r.b)("inlineCode",{parentName:"p"},"X-QOVERY-SOURCE: development")," header and from an IP address inside the allowed ranges."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"documentation main* \u22612h3m18s\n\u276f curl -v -H 'X-QOVERY-SOURCE: development' -s https://p8080-zdb6be5b9-z928629ac-gtw.z77ccfcb8.slab.sh/\n*   Trying 13.38.142.29:443...\n* Connected to p8080-zdb6be5b9-z928629ac-gtw.z77ccfcb8.slab.sh (13.38.142.29) port 443\n* ALPN: curl offers h2,http/1.1\n* (304) (OUT), TLS handshake, Client hello (1):\n*  CAfile: /etc/ssl/cert.pem\n*  CApath: none\n* (304) (IN), TLS handshake, Server hello (2):\n* (304) (IN), TLS handshake, Unknown (8):\n* (304) (IN), TLS handshake, Certificate (11):\n* (304) (IN), TLS handshake, CERT verify (15):\n* (304) (IN), TLS handshake, Finished (20):\n* (304) (OUT), TLS handshake, Finished (20):\n* SSL connection using TLSv1.3 / AEAD-AES256-GCM-SHA384\n* ALPN: server accepted h2\n* Server certificate:\n*  subject: CN=*.z77ccfcb8.slab.sh\n*  start date: Dec 30 08:35:19 2024 GMT\n*  expire date: Mar 30 08:35:18 2025 GMT\n*  subjectAltName: host \"p8080-zdb6be5b9-z928629ac-gtw.z77ccfcb8.slab.sh\" matched cert's \"*.z77ccfcb8.sl\n*  issuer: C=US; O=Let's Encrypt; CN=R11\n*  SSL certificate verify ok.\n* using HTTP/2\n* [HTTP/2] [1] OPENED stream for https://p8080-zdb6be5b9-z928629ac-gtw.z77ccfcb8.slab.sh/\n* [HTTP/2] [1] [:method: GET]\n* [HTTP/2] [1] [:scheme: https]\n* [HTTP/2] [1] [:authority: p8080-zdb6be5b9-z928629ac-gtw.z77ccfcb8.slab.sh]\n* [HTTP/2] [1] [:path: /]\n* [HTTP/2] [1] [user-agent: curl/8.4.0]\n* [HTTP/2] [1] [accept: */*]\n* [HTTP/2] [1] [x-qovery-source: development]\n> GET / HTTP/2\n> Host: p8080-zdb6be5b9-z928629ac-gtw.z77ccfcb8.slab.sh\n> User-Agent: curl/8.4.0\n> Accept: */*\n> X-QOVERY-SOURCE: development\n>\n< HTTP/2 200\n< date: Sun, 12 Jan 2025 20:05:32 GMT\n< content-type: text/plain\n< content-length: 458\n< strict-transport-security: max-age=31536000; includeSubDomains\n< x-debug-source: development\n< x-debug-ip: 92.xxx.xx.171\n< x-debug-is-authorized: 1\n<\nRequest served by app-zc6971a47-service-example-66b74b556d-l4kk6\n\nGET / HTTP/1.1\n\nHost: p8080-zdb6be5b9-z928629ac-gtw.z77ccfcb8.slab.sh\nAccept: */*\nUser-Agent: curl/8.4.0\nX-Forwarded-For: 92.xxx.xx.171\nX-Forwarded-Host: p8080-zdb6be5b9-z928629ac-gtw.z77ccfcb8.slab.sh\nX-Forwarded-Port: 443\nX-Forwarded-Proto: https\nX-Forwarded-Scheme: https\nX-Qovery-Source: development\nX-Real-Ip: 92.xxx.xx.171\nX-Request-Id: ce6b9567bac12b64a5b161dc8df3d0f9\nX-Scheme: https\n* Connection #0 to host p8080-zdb6be5b9-z928629ac-gtw.z77ccfcb8.slab.sh left intact\n")),Object(r.b)("p",null,"As we can see I've got an HTTP ",Object(r.b)("inlineCode",{parentName:"p"},"403")," status code, meaning the request was rejected."),Object(r.b)("p",null,"Debug headers values:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"< x-debug-source: development\n< x-debug-ip: 92.xxx.xx.171\n< x-debug-is-authorized: 1\n"))))),Object(r.b)("h2",{id:"conclusion"},"Conclusion"),Object(r.b)("p",null,"With the ",Object(r.b)("inlineCode",{parentName:"p"},"nginx.controller.http_snippet")," and ",Object(r.b)("inlineCode",{parentName:"p"},"nginx.controller.server_snippet")," cluster advanced settings, you can create powerful access control rules in NGINX that combine IP-based restrictions and HTTP header validation. This configuration is scalable and flexible for managing multi-tenant systems or any environment requiring complex authorization logic."),Object(r.b)("p",null,"Feel free to adapt this setup to your specific needs, and always test thoroughly before deploying to production!"))}p.isMDXComponent=!0},475:function(e,t,n){var a;!function(){"use strict";var n={}.hasOwnProperty;function i(){for(var e=[],t=0;t<arguments.length;t++){var a=arguments[t];if(a){var r=typeof a;if("string"===r||"number"===r)e.push(a);else if(Array.isArray(a)&&a.length){var c=i.apply(null,a);c&&e.push(c)}else if("object"===r)for(var o in a)n.call(a,o)&&a[o]&&e.push(o)}}return e.join(" ")}e.exports?(i.default=i,e.exports=i):void 0===(a=function(){return i}.apply(t,[]))||(e.exports=a)}()},476:function(e,t,n){"use strict";n(478);var a=n(0),i=n.n(a),r=n(475),c=n.n(r);n(132);t.a=function(e){var t=e.children,n=e.classNames,a=e.fill,r=e.icon,o=e.type,l=null;switch(o){case"danger":l="alert-triangle";break;case"success":l="check-circle";break;case"warning":l="alert-triangle";break;default:l="info"}return i.a.createElement("div",{className:c()(n,"alert","alert--"+o,{"alert--fill":a,"alert--icon":!1!==r}),role:"alert"},!1!==r&&i.a.createElement("i",{className:c()("feather","icon-"+(r||l))}),t)}},477:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return h}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=i.a.createContext({}),b=function(e){var t=i.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o({},t,{},e)),n},u=function(e){var t=b(e.components);return i.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},p=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=b(n),p=a,h=u["".concat(c,".").concat(p)]||u[p]||d[p]||r;return n?i.a.createElement(h,o({ref:t},s,{components:n})):i.a.createElement(h,o({ref:t},s))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,c=new Array(r);c[0]=p;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,c[1]=o;for(var s=2;s<r;s++)c[s]=n[s];return i.a.createElement.apply(null,c)}return i.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},478:function(e,t,n){var a=n(12);a(a.P,"Array",{fill:n(479)}),n(74)("fill")},479:function(e,t,n){"use strict";var a=n(27),i=n(75),r=n(26);e.exports=function(e){for(var t=a(this),n=r(t.length),c=arguments.length,o=i(c>1?arguments[1]:void 0,n),l=c>2?arguments[2]:void 0,s=void 0===l?n:i(l,n);s>o;)t[o++]=e;return t}},480:function(e,t,n){var a=n(28).f,i=Function.prototype,r=/^\s*function ([^ (]*)/;"name"in i||n(10)&&a(i,"name",{configurable:!0,get:function(){try{return(""+this).match(r)[1]}catch(e){return""}}})},481:function(e,t,n){"use strict";n(480);var a=n(0),i=n.n(a),r=n(476);t.a=function(e){var t=e.children,n=e.name;return i.a.createElement(r.a,{type:"info",fill:!0,icon:!1,rounded:!0,className:"list--icons list--icons--arrow list--tight list--indent margin-bottom--lg"},i.a.createElement("p",{class:"text--lg margin-bottom--sm",style:{marginTop:"-0.25em"}},"Before you begin, this ",n||"page"," assumes the following:"),t)}},482:function(e,t,n){"use strict";var a=n(1),i=n(0),r=n.n(i),c=n(39),o=n(486),l=n(20),s=n.n(l);t.a=function(e){var t,n=e.to,l=e.href,b=n||l,u=Object(o.a)(b),d=Object(i.useRef)(!1),p=s.a.canUseIntersectionObserver;return Object(i.useEffect)((function(){return!p&&u&&window.docusaurus.prefetch(b),function(){p&&t&&t.disconnect()}}),[b,p,u]),b&&u?r.a.createElement(c.b,Object(a.a)({},e,{onMouseEnter:function(){d.current||(window.docusaurus.preload(b),d.current=!0)},innerRef:function(e){var n,a;p&&e&&u&&(n=e,a=function(){window.docusaurus.prefetch(b)},(t=new window.IntersectionObserver((function(e){e.forEach((function(e){n===e.target&&(e.isIntersecting||e.intersectionRatio>0)&&(t.unobserve(n),t.disconnect(),a())}))}))).observe(n))},to:b})):r.a.createElement("a",Object(a.a)({},e,{href:b}))}},483:function(e,t,n){"use strict";var a=n(487),i=n(51);function r(e,t){return t.encode?t.strict?a(e):encodeURIComponent(e):e}t.extract=function(e){return e.split("?")[1]||""},t.parse=function(e,t){var n=function(e){var t;switch(e.arrayFormat){case"index":return function(e,n,a){t=/\[(\d*)\]$/.exec(e),e=e.replace(/\[\d*\]$/,""),t?(void 0===a[e]&&(a[e]={}),a[e][t[1]]=n):a[e]=n};case"bracket":return function(e,n,a){t=/(\[\])$/.exec(e),e=e.replace(/\[\]$/,""),t?void 0!==a[e]?a[e]=[].concat(a[e],n):a[e]=[n]:a[e]=n};default:return function(e,t,n){void 0!==n[e]?n[e]=[].concat(n[e],t):n[e]=t}}}(t=i({arrayFormat:"none"},t)),a=Object.create(null);return"string"!=typeof e?a:(e=e.trim().replace(/^(\?|#|&)/,""))?(e.split("&").forEach((function(e){var t=e.replace(/\+/g," ").split("="),i=t.shift(),r=t.length>0?t.join("="):void 0;r=void 0===r?null:decodeURIComponent(r),n(decodeURIComponent(i),r,a)})),Object.keys(a).sort().reduce((function(e,t){var n=a[t];return Boolean(n)&&"object"==typeof n&&!Array.isArray(n)?e[t]=function e(t){return Array.isArray(t)?t.sort():"object"==typeof t?e(Object.keys(t)).sort((function(e,t){return Number(e)-Number(t)})).map((function(e){return t[e]})):t}(n):e[t]=n,e}),Object.create(null))):a},t.stringify=function(e,t){var n=function(e){switch(e.arrayFormat){case"index":return function(t,n,a){return null===n?[r(t,e),"[",a,"]"].join(""):[r(t,e),"[",r(a,e),"]=",r(n,e)].join("")};case"bracket":return function(t,n){return null===n?r(t,e):[r(t,e),"[]=",r(n,e)].join("")};default:return function(t,n){return null===n?r(t,e):[r(t,e),"=",r(n,e)].join("")}}}(t=i({encode:!0,strict:!0,arrayFormat:"none"},t));return e?Object.keys(e).sort().map((function(a){var i=e[a];if(void 0===i)return"";if(null===i)return r(a,t);if(Array.isArray(i)){var c=[];return i.slice().forEach((function(e){void 0!==e&&c.push(n(a,e,c.length))})),c.join("&")}return r(a,t)+"="+r(i,t)})).filter((function(e){return e.length>0})).join("&"):""}},484:function(e,t,n){"use strict";var a=n(0),i=n.n(a),r=(n(475),n(483)),c=n.n(r);n(133);t.a=function(e){var t=e.children,n=e.headingDepth,r=e.hideFeedbackQuestion,o="undefined"!=typeof window?window.location:null,l={title:"Tutorial on "+o+" failed",body:"The tutorial on:\n\n"+o+"\n\nHere's what went wrong:\n\n\x3c!-- Insert command output and details. Thank you for reporting! :) --\x3e"},s="https://github.com/qovery/documentation/issues/new?"+c.a.stringify(l),b=Object(a.useState)(null),u=b[0],d=b[1];return i.a.createElement("div",{className:"steps steps--h"+n},t,!r&&!u&&i.a.createElement("div",{className:"steps--feedback"},"How was it? Did this tutorial work?\xa0\xa0",i.a.createElement("span",{className:"button button--sm button--primary",onClick:function(){return d("yes")}},"Yes"),"\xa0\xa0",i.a.createElement("a",{href:s,target:"_blank",className:"button button--sm button--primary"},"No")),"yes"==u&&i.a.createElement("div",{className:"steps--feedback steps--feedback--success"},"Thanks! If you're enjoying Qovery please consider ",i.a.createElement("a",{href:"https://github.com/qovery/documentation/",target:"_blank"},"starring our Github repo"),"."))}},485:function(e,t,n){"use strict";var a=n(0),i=n.n(a),r=n(482),c=n(475),o=n.n(c);n(134);t.a=function(e){var t=e.children,n=e.className,a=e.badge,c=e.leftIcon,l=e.rightIcon,s=e.size,b=e.target,u=e.to,d=o()("jump-to","jump-to--"+s,n),p=i.a.createElement("div",{className:"jump-to--inner"},i.a.createElement("div",{className:"jump-to--inner-2"},c&&i.a.createElement("div",{className:"jump-to--left"},i.a.createElement("i",{className:"feather icon-"+c})),i.a.createElement("div",{className:"jump-to--main"},a?i.a.createElement("span",{className:"badge badge--primary badge--right"},a):"",t),i.a.createElement("div",{className:"jump-to--right"},i.a.createElement("i",{className:"feather icon-"+(l||"chevron-right")+" arrow"}))));return b?i.a.createElement("a",{href:u,target:b,className:d},p):i.a.createElement(r.a,{to:u,className:d},p)}},486:function(e,t,n){"use strict";function a(e){return!1===/^(https?:|\/\/)/.test(e)}n.d(t,"a",(function(){return a}))},487:function(e,t,n){"use strict";e.exports=function(e){return encodeURIComponent(e).replace(/[!'()*]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}}}]);