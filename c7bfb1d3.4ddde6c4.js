/*! For license information please see c7bfb1d3.4ddde6c4.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[229],{381:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return u})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return d}));var o=n(1),r=n(9),i=(n(0),n(447)),a=n(454),c=n(446),l=n(451),s={last_modified_on:"2023-09-27",$schema:"/.meta/.schemas/guides.json",title:"How to integrate Qovery with GitHub Actions",description:"Learn how to integrate Qovery with GitHub Actions",author_github:"https://github.com/l0ck3",tags:["type: tutorial","technology: github"],hide_pagination:!0},u={categories:[{name:"tutorial",title:"Tutorial",description:"Additional step-by-step resources to leverage even more Qovery",permalink:"/guides/tutorial"}],coverLabel:"How to integrate Qovery with GitHub Actions",description:"Learn how to integrate Qovery with GitHub Actions",permalink:"/guides/tutorial/how-to-integrate-qovery-with-github-actions",readingTime:"6 min read",source:"@site/guides/tutorial/how-to-integrate-qovery-with-github-actions.md",tags:[{label:"type: tutorial",permalink:"/guides/tags/type-tutorial"},{label:"technology: github",permalink:"/guides/tags/technology-github"}],title:"How to integrate Qovery with GitHub Actions",truncated:!1,prevItem:{title:"How to deploy a Rust REST API application on AWS with ease",permalink:"/guides/tutorial/how-to-deploy-a-rust-rest-api-application-on-aws-with-ease"},nextItem:{title:"How to run commands before the application starts",permalink:"/guides/tutorial/how-to-run-commands-at-application-startup"}},p=[{value:"Goal",id:"goal",children:[]},{value:"Get your application ready",id:"get-your-application-ready",children:[]},{value:"Add your GitHub Actions Workflow",id:"add-your-github-actions-workflow",children:[{value:"Create the Workflows directory",id:"create-the-workflows-directory",children:[]},{value:"Add a Test and Deploy workflow",id:"add-a-test-and-deploy-workflow",children:[]},{value:"Get a Qovery API token",id:"get-a-qovery-api-token",children:[]},{value:"Add your token to your GitHub repository secrets",id:"add-your-token-to-your-github-repository-secrets",children:[]}]},{value:"Execute the GitHub Actions Pipeline",id:"execute-the-github-actions-pipeline",children:[]},{value:"Advanced use-cases",id:"advanced-use-cases",children:[]},{value:"Conclusion",id:"conclusion",children:[]}],b={rightToc:p};function d(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(o.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Getting started with Qovery is easy. Just plug your Git repository, and you can deploy your application directly.\nBut in some cases you will want a more advanced CI workflow where some steps need to happen before deployment."),Object(i.b)("p",null,"One of the CI tools you can use for that matter is GitHub Actions."),Object(i.b)(l.a,{name:"guide",mdxType:"Assumptions"},Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"You have a Qovery cluster running."),Object(i.b)("li",{parentName:"ul"},"You are using GitHub Actions as a CI server."),Object(i.b)("li",{parentName:"ul"},"You have a Qovery application deployed."),Object(i.b)("li",{parentName:"ul"},"You have the Qovery CLI installed and configured."))),Object(i.b)("p",null,"If you don't have an application running on Qovery yet, check ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"https://hub.qovery.com/docs/getting-started/deploy-my-app/"}),"the documentation")," to create one."),Object(i.b)("h2",{id:"goal"},"Goal"),Object(i.b)("p",null,"In this tutorial, we will deploy an application with GitHub Actions by using the Qovery CLI."),Object(i.b)("h2",{id:"get-your-application-ready"},"Get your application ready"),Object(i.b)("p",null,"The first thing we need to do, is to disable automatic deployments. By default, Qovery applications get re-deployed whenever you push some code to the configured branch.\nSince we want to trigger the deployment through GitHub Actions, we need to disable this behavior."),Object(i.b)("p",null,"Go to your application page, then click ",Object(i.b)("inlineCode",{parentName:"p"},"Settings"),":"),Object(i.b)("p",{align:"center"},Object(i.b)("img",{src:"/img/how-to-integrate-qovery-with-github-actions/1.png",alt:""})),Object(i.b)("p",null,"Then on the ",Object(i.b)("inlineCode",{parentName:"p"},"General")," section go to the ",Object(i.b)("inlineCode",{parentName:"p"},"Auto-deploy")," field, select ",Object(i.b)("inlineCode",{parentName:"p"},"Off"),":"),Object(i.b)("p",{align:"center"},Object(i.b)("img",{src:"/img/how-to-integrate-qovery-with-github-actions/2.png",alt:""})),Object(i.b)("p",null,"Click save."),Object(i.b)("h2",{id:"add-your-github-actions-workflow"},"Add your GitHub Actions Workflow"),Object(i.b)("p",null,"We will now add a GitHub Actions workflow to your application. Workflow are defined with YAML configuration files that are placed in the code directory of your application.\nAs an example we will define a workflow for a NodeJS application. We will first run our unit tests, then launch the Qovery deployment if the tests pass."),Object(i.b)("p",null,"You can adapt those steps for your own stack and needs. Read the ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"https://docs.github.com/en/actions"}),"GitHub Actions documentation")," to learn more."),Object(i.b)(a.a,{headingDepth:3,mdxType:"Steps"},Object(i.b)("ol",null,Object(i.b)("li",null,Object(i.b)("h3",{id:"create-the-workflows-directory"},"Create the Workflows directory"),Object(i.b)("p",null,"All your workflows files must be stored in a specific ",Object(i.b)("inlineCode",{parentName:"p"},".github/workflows")," directory. Create this directory at the root of your project.")),Object(i.b)("li",null,Object(i.b)("h3",{id:"add-a-test-and-deploy-workflow"},"Add a Test and Deploy workflow"),Object(i.b)("p",null,"In your Workflows folder, create a ",Object(i.b)("inlineCode",{parentName:"p"},"test-and-deploy.yaml")," file with the following content:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-yaml",metastring:'title=".github/workflows/test-and-deploy.yaml"',title:'".github/workflows/test-and-deploy.yaml"'}),"name: Test And Deploy to Qovery\non:\n  workflow_call:\n    secrets:\n      api-token:\n        required: true\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Install modules\n      run: yarn\n    - name: Run tests\n      run: yarn test\n  deploy:\n    needs: test\n    runs-on: ubuntu-latest\n    name: Deploy on Qovery\n    steps:\n      - name: Deploy with Qovery\n        uses: actions/checkout@v3\n        env:\n          QOVERY_CLI_ACCESS_TOKEN: ${{ secrets.QOVERY_CLI_ACCESS_TOKEN }}\n        shell: bash\n        run: |\n          # Download and install Qovery CLI\n          curl -s https://get.qovery.com | bash\n\n          qovery application deploy \\\n            --organization <your_org_name> \\\n            --project <your_project_name> \\\n            --environment <your_environment_name> \\\n            --application <your_qovery_app_name> \\\n            --commit-id ${{ github.sha }} \\\n            --watch\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The ",Object(i.b)("inlineCode",{parentName:"li"},"on")," section contains a ",Object(i.b)("inlineCode",{parentName:"li"},"workflow_call")," directive. It means that this workflow will be triggered when called from another workflow.\nWe're doing this because we won't use this workflow directly. Since we might have several environments to deploy to Qovery depending on the branch, we could have one workflow per environment, and we want to avoid repeating all the steps."),Object(i.b)("li",{parentName:"ul"},"The ",Object(i.b)("inlineCode",{parentName:"li"},"inputs")," and ",Object(i.b)("inlineCode",{parentName:"li"},"secrets")," sections are defining the values that we will need to pass to our workflow"),Object(i.b)("li",{parentName:"ul"},"The ",Object(i.b)("inlineCode",{parentName:"li"},"jobs")," section lists the ",Object(i.b)("inlineCode",{parentName:"li"},"jobs")," and the ",Object(i.b)("inlineCode",{parentName:"li"},"steps")," that in needs to accomplish. Here we have two jobs and five steps:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"test")," where we check out the code, we install Yarn modules, and we run tests through Jest"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"deploy")," where we check out the code and deploy to Qovery.")))),Object(i.b)("p",null,"Several things worth noting:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The organization / project / environment / application are case-sensitive."),Object(i.b)("li",{parentName:"ul"},"Our ",Object(i.b)("inlineCode",{parentName:"li"},"deploy")," job has a ",Object(i.b)("inlineCode",{parentName:"li"},"needs")," instructions, telling GitHub Actions that this job can only run when the ",Object(i.b)("inlineCode",{parentName:"li"},"test")," job succeeds."),Object(i.b)("li",{parentName:"ul"},"The ",Object(i.b)("inlineCode",{parentName:"li"},"with")," section of our last ",Object(i.b)("inlineCode",{parentName:"li"},"deploy")," step contains interpolated strings: ${{ inputs.xxxx }}. Those are values passed to our workflow, that our Qovery action needs. They will be passed from the calling workflow."))),Object(i.b)("li",null,Object(i.b)("h3",{id:"get-a-qovery-api-token"},"Get a Qovery API token"),Object(i.b)("p",null,"To get an API token, use the Qovery CLI:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-bash"}),"qovery token\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Select your organization. (tokens are valid for only one organization)."),Object(i.b)("li",{parentName:"ul"},"Enter a name for your token."),Object(i.b)("li",{parentName:"ul"},"Enter a description for your token.")),Object(i.b)("p",null,"You will get an output like this one:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{}),"qovery token Qovery: ---- Never share this authentication token and keep it secure ----\nQovery: qov_xxx....\nQovery: ---- Never share this authentication token and keep it secure ----\n")),Object(i.b)(c.a,{type:"warning",mdxType:"Alert"},"At the time of writing, we don't have a way to invalidate tokens. Store it carefully.")),Object(i.b)("li",null,Object(i.b)("h3",{id:"add-your-token-to-your-github-repository-secrets"},"Add your token to your GitHub repository secrets"),Object(i.b)("p",null,"Go to your GitHub repository then to the ",Object(i.b)("inlineCode",{parentName:"p"},"Settings"),":"),Object(i.b)("p",{align:"center"},Object(i.b)("img",{src:"/img/how-to-integrate-qovery-with-github-actions/3.png",alt:""})),Object(i.b)("p",null,"Got to the ",Object(i.b)("inlineCode",{parentName:"p"},"Secrets/Actions")," section and click on ",Object(i.b)("inlineCode",{parentName:"p"},"New repository secret"),":"),Object(i.b)("p",{align:"center"},Object(i.b)("img",{src:"/img/how-to-integrate-qovery-with-github-actions/4.png",alt:""})),Object(i.b)("p",null,"Add your secret with the name ",Object(i.b)("inlineCode",{parentName:"p"},"QOVERY_API_TOKEN")," and save:"),Object(i.b)("p",{align:"center"},Object(i.b)("img",{src:"/img/how-to-integrate-qovery-with-github-actions/5.png",alt:""}))))),Object(i.b)("h2",{id:"execute-the-github-actions-pipeline"},"Execute the GitHub Actions Pipeline"),Object(i.b)("p",null,"We're done with the setup. You can now push your code to the ",Object(i.b)("inlineCode",{parentName:"p"},"main")," branch. If you did it properly, under the ",Object(i.b)("inlineCode",{parentName:"p"},"Actions")," tab on your GitHub repository, you should see your job being run."),Object(i.b)("p",{align:"center"},Object(i.b)("img",{src:"/img/how-to-integrate-qovery-with-github-actions/6.png",alt:""})),Object(i.b)("p",null,"You can click on it to see the details of the jobs. Once the testing phase is green, it will start the deployment job."),Object(i.b)("p",{align:"center"},Object(i.b)("img",{src:"/img/how-to-integrate-qovery-with-github-actions/7.png",alt:""})),Object(i.b)("p",null,"As soon as the job is set up, and it starts actually deploying, go to the Qovery console and check that your application is actually being deployed."),Object(i.b)("p",{align:"center"},Object(i.b)("img",{src:"/img/how-to-integrate-qovery-with-github-actions/8.png",alt:""})),Object(i.b)("h2",{id:"advanced-use-cases"},"Advanced use-cases"),Object(i.b)("p",null,"It's possible to support any use cases by using the ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/using-qovery/interface/cli/"}),"Qovery CLI"),". Like cloning an environment, changing the branch of some applications and deploying only a subset of applications. Refers to the ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/using-qovery/interface/cli/"}),"Qovery CLI documentation")," to explore all the commands that you can use."),Object(i.b)("p",null,"Check out our ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/using-qovery/integration/continuous-integration/github-actions/"}),"GitHub Actions integration page")," to check out more examples."),Object(i.b)("h2",{id:"conclusion"},"Conclusion"),Object(i.b)("p",null,"Integrating Qovery with GitHub Actions enables more complex workflows than just deploying on code push. You can make sure your test suite succeeds before deploying\nor anything else you need, without sacrificing the simplicity of deployment Qovery brings you."))}d.isMDXComponent=!0},445:function(e,t,n){var o;!function(){"use strict";var n={}.hasOwnProperty;function r(){for(var e=[],t=0;t<arguments.length;t++){var o=arguments[t];if(o){var i=typeof o;if("string"===i||"number"===i)e.push(o);else if(Array.isArray(o)&&o.length){var a=r.apply(null,o);a&&e.push(a)}else if("object"===i)for(var c in o)n.call(o,c)&&o[c]&&e.push(c)}}return e.join(" ")}e.exports?(r.default=r,e.exports=r):void 0===(o=function(){return r}.apply(t,[]))||(e.exports=o)}()},446:function(e,t,n){"use strict";n(448);var o=n(0),r=n.n(o),i=n(445),a=n.n(i);n(132);t.a=function(e){var t=e.children,n=e.classNames,o=e.fill,i=e.icon,c=e.type,l=null;switch(c){case"danger":l="alert-triangle";break;case"success":l="check-circle";break;case"warning":l="alert-triangle";break;default:l="info"}return r.a.createElement("div",{className:a()(n,"alert","alert--"+c,{"alert--fill":o,"alert--icon":!1!==i}),role:"alert"},!1!==i&&r.a.createElement("i",{className:a()("feather","icon-"+(i||l))}),t)}},447:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var o=n(0),r=n.n(o);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),u=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c({},t,{},e)),n},p=function(e){var t=u(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=Object(o.forwardRef)((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=u(n),d=o,h=p["".concat(a,".").concat(d)]||p[d]||b[d]||i;return n?r.a.createElement(h,c({ref:t},s,{components:n})):r.a.createElement(h,c({ref:t},s))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var s=2;s<i;s++)a[s]=n[s];return r.a.createElement.apply(null,a)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},448:function(e,t,n){var o=n(12);o(o.P,"Array",{fill:n(449)}),n(74)("fill")},449:function(e,t,n){"use strict";var o=n(27),r=n(75),i=n(26);e.exports=function(e){for(var t=o(this),n=i(t.length),a=arguments.length,c=r(a>1?arguments[1]:void 0,n),l=a>2?arguments[2]:void 0,s=void 0===l?n:r(l,n);s>c;)t[c++]=e;return t}},450:function(e,t,n){var o=n(28).f,r=Function.prototype,i=/^\s*function ([^ (]*)/;"name"in r||n(10)&&o(r,"name",{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(e){return""}}})},451:function(e,t,n){"use strict";n(450);var o=n(0),r=n.n(o),i=n(446);t.a=function(e){var t=e.children,n=e.name;return r.a.createElement(i.a,{type:"info",fill:!0,icon:!1,rounded:!0,className:"list--icons list--icons--arrow list--tight list--indent margin-bottom--lg"},r.a.createElement("p",{class:"text--lg margin-bottom--sm",style:{marginTop:"-0.25em"}},"Before you begin, this ",n||"page"," assumes the following:"),t)}},453:function(e,t,n){"use strict";var o=n(457),r=n(51);function i(e,t){return t.encode?t.strict?o(e):encodeURIComponent(e):e}t.extract=function(e){return e.split("?")[1]||""},t.parse=function(e,t){var n=function(e){var t;switch(e.arrayFormat){case"index":return function(e,n,o){t=/\[(\d*)\]$/.exec(e),e=e.replace(/\[\d*\]$/,""),t?(void 0===o[e]&&(o[e]={}),o[e][t[1]]=n):o[e]=n};case"bracket":return function(e,n,o){t=/(\[\])$/.exec(e),e=e.replace(/\[\]$/,""),t?void 0!==o[e]?o[e]=[].concat(o[e],n):o[e]=[n]:o[e]=n};default:return function(e,t,n){void 0!==n[e]?n[e]=[].concat(n[e],t):n[e]=t}}}(t=r({arrayFormat:"none"},t)),o=Object.create(null);return"string"!=typeof e?o:(e=e.trim().replace(/^(\?|#|&)/,""))?(e.split("&").forEach((function(e){var t=e.replace(/\+/g," ").split("="),r=t.shift(),i=t.length>0?t.join("="):void 0;i=void 0===i?null:decodeURIComponent(i),n(decodeURIComponent(r),i,o)})),Object.keys(o).sort().reduce((function(e,t){var n=o[t];return Boolean(n)&&"object"==typeof n&&!Array.isArray(n)?e[t]=function e(t){return Array.isArray(t)?t.sort():"object"==typeof t?e(Object.keys(t)).sort((function(e,t){return Number(e)-Number(t)})).map((function(e){return t[e]})):t}(n):e[t]=n,e}),Object.create(null))):o},t.stringify=function(e,t){var n=function(e){switch(e.arrayFormat){case"index":return function(t,n,o){return null===n?[i(t,e),"[",o,"]"].join(""):[i(t,e),"[",i(o,e),"]=",i(n,e)].join("")};case"bracket":return function(t,n){return null===n?i(t,e):[i(t,e),"[]=",i(n,e)].join("")};default:return function(t,n){return null===n?i(t,e):[i(t,e),"=",i(n,e)].join("")}}}(t=r({encode:!0,strict:!0,arrayFormat:"none"},t));return e?Object.keys(e).sort().map((function(o){var r=e[o];if(void 0===r)return"";if(null===r)return i(o,t);if(Array.isArray(r)){var a=[];return r.slice().forEach((function(e){void 0!==e&&a.push(n(o,e,a.length))})),a.join("&")}return i(o,t)+"="+i(r,t)})).filter((function(e){return e.length>0})).join("&"):""}},454:function(e,t,n){"use strict";var o=n(0),r=n.n(o),i=(n(445),n(453)),a=n.n(i);n(133);t.a=function(e){var t=e.children,n=e.headingDepth,i=e.hideFeedbackQuestion,c="undefined"!=typeof window?window.location:null,l={title:"Tutorial on "+c+" failed",body:"The tutorial on:\n\n"+c+"\n\nHere's what went wrong:\n\n\x3c!-- Insert command output and details. Thank you for reporting! :) --\x3e"},s="https://github.com/qovery/documentation/issues/new?"+a.a.stringify(l),u=Object(o.useState)(null),p=u[0],b=u[1];return r.a.createElement("div",{className:"steps steps--h"+n},t,!i&&!p&&r.a.createElement("div",{className:"steps--feedback"},"How was it? Did this tutorial work?\xa0\xa0",r.a.createElement("span",{className:"button button--sm button--primary",onClick:function(){return b("yes")}},"Yes"),"\xa0\xa0",r.a.createElement("a",{href:s,target:"_blank",className:"button button--sm button--primary"},"No")),"yes"==p&&r.a.createElement("div",{className:"steps--feedback steps--feedback--success"},"Thanks! If you're enjoying Qovery please consider ",r.a.createElement("a",{href:"https://github.com/qovery/documentation/",target:"_blank"},"starring our Github repo"),"."))}},457:function(e,t,n){"use strict";e.exports=function(e){return encodeURIComponent(e).replace(/[!'()*]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}}}]);