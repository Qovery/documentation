/*! For license information please see 6308ca27.14b42e6b.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[137],{288:function(e,t,i){"use strict";i.r(t),i.d(t,"frontMatter",(function(){return s})),i.d(t,"metadata",(function(){return c})),i.d(t,"rightToc",(function(){return l})),i.d(t,"default",(function(){return p}));var r=i(1),n=i(9),a=(i(0),i(479)),o=(i(487),i(478)),s=(i(483),{last_modified_on:"2025-02-25",title:"Image Mirroring",description:"Learn how images are mirrored within your cloud account"}),c={id:"using-qovery/deployment/image-mirroring",title:"Image Mirroring",description:"Learn how images are mirrored within your cloud account",source:"@site/docs/using-qovery/deployment/image-mirroring.md",permalink:"/docs/using-qovery/deployment/image-mirroring",sidebar:"docs",previous:{title:"Deployment Strategies",permalink:"/docs/using-qovery/deployment/deployment-strategies"},next:{title:"Observability overview",permalink:"/docs/using-qovery/observability"}},l=[{value:"Application built via the Qovery CI",id:"application-built-via-the-qovery-ci",children:[]},{value:"Application deployed from a container registry",id:"application-deployed-from-a-container-registry",children:[{value:"Why image mirroring is necessary",id:"why-image-mirroring-is-necessary",children:[]},{value:"Why unique image tags are necessary",id:"why-unique-image-tags-are-necessary",children:[]},{value:"Disabling the mirroring",id:"disabling-the-mirroring",children:[]}]},{value:"Image retention policy",id:"image-retention-policy",children:[]}],u={rightToc:l};function p(e){var t=e.components,i=Object(n.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},u,i,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"When Qovery is running on your infrastructure, it requires an image registry on your cloud account to store the images built via the Qovery CI or to mirror the images deployed from a 3rd party container registry."),Object(a.b)("p",null,"This process allows to:\n1. speed up the deployment process by avoiding to re-build every time the application image from scratch\n2. speed up and secure the scale up operation of your application since it doesn't need to pull the image from the source registry every time a new instance of the application is needed."),Object(a.b)("p",null,"This ",Object(a.b)("inlineCode",{parentName:"p"},"mirroring registry")," is available and configurable within the Qovery interface within the ",Object(a.b)("inlineCode",{parentName:"p"},"Mirroring registry")," section of your cluster."),Object(a.b)("p",{align:"center"},Object(a.b)("img",{src:"/img/deployment/mirror-registry.png",alt:"Mirroring Repository"})),Object(a.b)("h1",{id:"how-does-it-work"},"How does it work"),Object(a.b)("p",null,"Every time an application needs to be deployed on your cluster, the deployed image is picked from the ",Object(a.b)("inlineCode",{parentName:"p"},"mirroring registry"),". How the image is pushed on the ",Object(a.b)("inlineCode",{parentName:"p"},"mirroring registry")," it depends if you build the application with the Qovery CI or not."),Object(a.b)("h2",{id:"application-built-via-the-qovery-ci"},"Application built via the Qovery CI"),Object(a.b)("p",null,'At the end of the build process, the Qovery CI push the generated image into your mirroring registry. The images pushed here are organized by "Git repository", meaning that the image built on services having the same git repsitory will be pushed in the same repository, named z<short_cluster_id>-git_repo_name (or namespace, depending on the cloud provider).'),Object(a.b)("p",null,"The tag assigned to the built image is based on the following elements (build context): commit ID, repository root path, Dockerfile path, Dockerfile content, and ARGS environment variables (present in the dockerfile). This ensures that each service's build and mirroring process is completely isolated from others."),Object(a.b)("p",null,"Before building the application A1, Qovery checks within mirroring registry at the repository of the application A1 if an image has already being built with the build context parameters (commit id, repository root path, dockerfile path, dockerfile content and environment variables) within the same cluster. "),Object(a.b)("p",null,"If the image already exists, the build is skipped and Qovery starts the deployment of that image on the Kubernetes cluster."),Object(a.b)("p",null,"Otherwise, the image is built by the Qovery pipeline the resulting image is pushed on the mirroring registry at the repository of the application A1. "),Object(a.b)("p",{align:"center"},Object(a.b)("img",{src:"/img/deployment/build-mirror.png",alt:"Mirroring built image"})),Object(a.b)("p",null,"Once an application is deleted, if no other application is using the same image name and tag, the image is deleted from the mirroring registry. If the image is still used by another application, it will not be deleted until the lifecycle TTL is reached (see ","[this section][#image-retention-policy]",")."),Object(a.b)("p",null,"In order to speed up the image build, we are using the mirroring registry as a remote cache (available in AWS, GCP and Scaleway). It will avoid building the image from scratch, only the layers that changed will be built."),Object(a.b)("p",null,"Check out the best practices section below to know some best practices you can follow to ensure you benefit from all the caching system and reduce the build time."),Object(a.b)("h2",{id:"application-deployed-from-a-container-registry"},"Application deployed from a container registry"),Object(a.b)("p",null,"The Qovery behaviour in this case will depend on the chosen ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/using-qovery/configuration/cluster-advanced-settings/#image-registry"}),"mirroring mode")," within the cluster advanced settings. "),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"}," Service (Default) ")),Object(a.b)("p",null,'Images within the mirroring registry are organized by "Qovery service", each service has its own repository (or namespace, naming depends on the cloud provider). This means that each service mirroring process is completely isolated from the others.'),Object(a.b)("p",null,"At the beginning of the deployment of the application A1, Qovery checks within mirroring registry at the repository of the application A1 if an image with the same image name and tag exists. "),Object(a.b)("p",null,"If the image already exists, the mirroring process is skipped and Qovery starts the deployment of that image on the Kubernetes cluster."),Object(a.b)("p",null,"Otherwise, the image is pulled from the source registry and pushed on the mirroring registry at the repository of the application A1, deleting any previous image."),Object(a.b)("p",{align:"center"},Object(a.b)("img",{src:"/img/deployment/image-mirror-service.png",alt:"Mirroring image from registry - Service case"})),Object(a.b)("p",null,"Pro:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Images are automatically deleted when not needed anymore")),Object(a.b)("p",null,"Cons:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"If the same image is used across environments or service, Qovery will mirror multiple time the same image, reducing the deployment speed")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"}," Cluster ")),Object(a.b)(o.a,{type:"info",mdxType:"Alert"},Object(a.b)("p",null,"This is not available on Scaleway.")),Object(a.b)("p",null,'Images within the mirroring registry are organized by "Qovery cluster", meaning that the application deployed on the same cluster are all mirrored on the same repository.'),Object(a.b)("p",null,"At the beginning of the deployment of the application A1, Qovery checks within mirroring registry at the repository of the cluster C1 if an image with the same image name and tag exists. "),Object(a.b)("p",null,"If the image already exists, the mirroring process is skipped and Qovery starts the deployment of that image on the Kubernetes cluster."),Object(a.b)("p",null,"Otherwise, the image is pulled from the source registry and pushed on the mirroring registry at the repository of the cluster C1."),Object(a.b)("p",{align:"center"},Object(a.b)("img",{src:"/img/deployment/image-mirror-cluster.png",alt:"Mirroring image from registry - Cluster case"})),Object(a.b)("p",null,"Pro:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"If the same image is used across environments or service, this setup will avoid to mirror multiple time the same image, increasing the deployment speed.")),Object(a.b)("p",null,"Cons:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Qovery can't automatically delete the images mirrored on the mirroring registry. This will increase the cloud provider cost of your image registry since it will store more data. To reduce the amount data stored you can reduce the image TTL via the cluster advanced settings ",Object(a.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/using-qovery/configuration/cluster-advanced-settings/#image-registry"}),"registry.image_retention_time"))),Object(a.b)("h3",{id:"why-image-mirroring-is-necessary"},"Why image mirroring is necessary"),Object(a.b)("p",null,"Image mirroring is a general best practice: you don't want your system to be strictly coupled on a third party."),Object(a.b)("p",null,"Let's say that you run an application on your production environment and Kubernetes needs to pull again the image to spawn a new instance for the application. In this case, you don't want to make this fail due to the unavailability of your source container registry. This is why we make sure that a copy is always available on the container registry next to the Kubernetes cluster."),Object(a.b)("h3",{id:"why-unique-image-tags-are-necessary"},"Why unique image tags are necessary"),Object(a.b)("p",null,"When working with containerized applications, it is crucial to employ unique image tags for precise version management. This practice ensures complete confidence in the version running within a container. Failing to use unique image tags can lead to adverse consequences due to the image caching mechanisms employed by both the Qovery mirroring system and Kubernetes:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Mirroring Registry: Qovery\u2019s mirroring system stores images in a registry. If an image tag remains the same between two versions, the new version will not be mirrored. Consequently, the new version will not be deployed, affecting the overall application."),Object(a.b)("li",{parentName:"ul"},"Kubernetes: Applications deployed by Qovery on Kubernetes adhere to the \u201cifNotPresent\u201d image pull policy. This policy means that if the image already exists on the Kubernetes node\u2019s local disk, Kubernetes will not attempt to pull it again. However, if the image tag remains unchanged, the new image version will not be fetched, resulting in your pods running the outdated application code.")),Object(a.b)("p",null,"In summary, maintaining unique image tags is a critical aspect of effective version control and ensuring that your applications run the intended versions without disruptions caused by caching mechanisms."),Object(a.b)("h3",{id:"disabling-the-mirroring"},"Disabling the mirroring"),Object(a.b)("p",null,"If you want to reduce the deployment time by avoiding the mirroring operation, you can push your built images directly into the ",Object(a.b)("inlineCode",{parentName:"p"},"Mirroring registry"),". "),Object(a.b)("p",null,"Push the images in a image registry ",Object(a.b)("inlineCode",{parentName:"p"},"repository")," having the same name of the image you want to deploy. "),Object(a.b)("p",null,"Also, if the container registry source url (from a service) is the same than the cluster container registry url, no mirroring would be done.\nExample: if the source registry is ",Object(a.b)("inlineCode",{parentName:"p"},"https://xxx.dkr.ecr.us-west-2.amazonaws.com")," and the cluster container registry url is ",Object(a.b)("inlineCode",{parentName:"p"},"https://xxx.dkr.ecr.us-west-2.amazonaws.com"),", no mirroring would be done."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Example on AWS")),Object(a.b)("p",null,"Let's say you have a container image called ",Object(a.b)("inlineCode",{parentName:"p"},"nginx")," that you build on your CI and the container registry associated with your cluster is ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://32432542.dkr.ecr.eu-west-3.amazonaws.com"}),"https://32432542.dkr.ecr.eu-west-3.amazonaws.com"),". "),Object(a.b)("p",null,"You can push this image on the mirroring registry within the repository ",Object(a.b)("inlineCode",{parentName:"p"},"nginx"),", avoiding the mirroring operation: ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://32432542.dkr.ecr.eu-west-3.amazonaws.com/nginx"}),"https://32432542.dkr.ecr.eu-west-3.amazonaws.com/nginx")),Object(a.b)("h2",{id:"image-retention-policy"},"Image retention policy"),Object(a.b)("p",null,"Depending on the cloud provider, you can define how long an image should be kept in your registry via a TTL (Time To Live). You can configure the TTL via the advanced settings ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/using-qovery/configuration/cluster-advanced-settings/#image-registry"}),"image_retention_time")),Object(a.b)("p",null,"Please keep in mind that changing this settings will only affect new ECR repositories created after the change. Existing repositories will not be affected."))}p.isMDXComponent=!0},477:function(e,t,i){var r;!function(){"use strict";var i={}.hasOwnProperty;function n(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var a=typeof r;if("string"===a||"number"===a)e.push(r);else if(Array.isArray(r)&&r.length){var o=n.apply(null,r);o&&e.push(o)}else if("object"===a)for(var s in r)i.call(r,s)&&r[s]&&e.push(s)}}return e.join(" ")}e.exports?(n.default=n,e.exports=n):void 0===(r=function(){return n}.apply(t,[]))||(e.exports=r)}()},478:function(e,t,i){"use strict";i(480);var r=i(0),n=i.n(r),a=i(477),o=i.n(a);i(132);t.a=function(e){var t=e.children,i=e.classNames,r=e.fill,a=e.icon,s=e.type,c=null;switch(s){case"danger":c="alert-triangle";break;case"success":c="check-circle";break;case"warning":c="alert-triangle";break;default:c="info"}return n.a.createElement("div",{className:o()(i,"alert","alert--"+s,{"alert--fill":r,"alert--icon":!1!==a}),role:"alert"},!1!==a&&n.a.createElement("i",{className:o()("feather","icon-"+(a||c))}),t)}},479:function(e,t,i){"use strict";i.d(t,"a",(function(){return p})),i.d(t,"b",(function(){return h}));var r=i(0),n=i.n(r);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,r)}return i}function s(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?o(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function c(e,t){if(null==e)return{};var i,r,n=function(e,t){if(null==e)return{};var i,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)i=a[r],t.indexOf(i)>=0||(n[i]=e[i]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)i=a[r],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(n[i]=e[i])}return n}var l=n.a.createContext({}),u=function(e){var t=n.a.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):s({},t,{},e)),i},p=function(e){var t=u(e.components);return n.a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},g=Object(r.forwardRef)((function(e,t){var i=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=u(i),g=r,h=p["".concat(o,".").concat(g)]||p[g]||m[g]||a;return i?n.a.createElement(h,s({ref:t},l,{components:i})):n.a.createElement(h,s({ref:t},l))}));function h(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=i.length,o=new Array(a);o[0]=g;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<a;l++)o[l]=i[l];return n.a.createElement.apply(null,o)}return n.a.createElement.apply(null,i)}g.displayName="MDXCreateElement"},480:function(e,t,i){var r=i(12);r(r.P,"Array",{fill:i(481)}),i(74)("fill")},481:function(e,t,i){"use strict";var r=i(27),n=i(75),a=i(26);e.exports=function(e){for(var t=r(this),i=a(t.length),o=arguments.length,s=n(o>1?arguments[1]:void 0,i),c=o>2?arguments[2]:void 0,l=void 0===c?i:n(c,i);l>s;)t[s++]=e;return t}},482:function(e,t,i){var r=i(28).f,n=Function.prototype,a=/^\s*function ([^ (]*)/;"name"in n||i(10)&&r(n,"name",{configurable:!0,get:function(){try{return(""+this).match(a)[1]}catch(e){return""}}})},483:function(e,t,i){"use strict";i(482);var r=i(0),n=i.n(r),a=i(478);t.a=function(e){var t=e.children,i=e.name;return n.a.createElement(a.a,{type:"info",fill:!0,icon:!1,rounded:!0,className:"list--icons list--icons--arrow list--tight list--indent margin-bottom--lg"},n.a.createElement("p",{class:"text--lg margin-bottom--sm",style:{marginTop:"-0.25em"}},"Before you begin, this ",i||"page"," assumes the following:"),t)}},484:function(e,t,i){"use strict";var r=i(1),n=i(0),a=i.n(n),o=i(39),s=i(488),c=i(20),l=i.n(c);t.a=function(e){var t,i=e.to,c=e.href,u=i||c,p=Object(s.a)(u),m=Object(n.useRef)(!1),g=l.a.canUseIntersectionObserver;return Object(n.useEffect)((function(){return!g&&p&&window.docusaurus.prefetch(u),function(){g&&t&&t.disconnect()}}),[u,g,p]),u&&p?a.a.createElement(o.b,Object(r.a)({},e,{onMouseEnter:function(){m.current||(window.docusaurus.preload(u),m.current=!0)},innerRef:function(e){var i,r;g&&e&&p&&(i=e,r=function(){window.docusaurus.prefetch(u)},(t=new window.IntersectionObserver((function(e){e.forEach((function(e){i===e.target&&(e.isIntersecting||e.intersectionRatio>0)&&(t.unobserve(i),t.disconnect(),r())}))}))).observe(i))},to:u})):a.a.createElement("a",Object(r.a)({},e,{href:u}))}},487:function(e,t,i){"use strict";var r=i(0),n=i.n(r),a=i(484),o=i(477),s=i.n(o);i(134);t.a=function(e){var t=e.children,i=e.className,r=e.badge,o=e.leftIcon,c=e.rightIcon,l=e.size,u=e.target,p=e.to,m=s()("jump-to","jump-to--"+l,i),g=n.a.createElement("div",{className:"jump-to--inner"},n.a.createElement("div",{className:"jump-to--inner-2"},o&&n.a.createElement("div",{className:"jump-to--left"},n.a.createElement("i",{className:"feather icon-"+o})),n.a.createElement("div",{className:"jump-to--main"},r?n.a.createElement("span",{className:"badge badge--primary badge--right"},r):"",t),n.a.createElement("div",{className:"jump-to--right"},n.a.createElement("i",{className:"feather icon-"+(c||"chevron-right")+" arrow"}))));return u?n.a.createElement("a",{href:p,target:u,className:m},g):n.a.createElement(a.a,{to:p,className:m},g)}},488:function(e,t,i){"use strict";function r(e){return!1===/^(https?:|\/\/)/.test(e)}i.d(t,"a",(function(){return r}))}}]);